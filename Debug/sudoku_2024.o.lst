   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"sudoku_2024.c"
  21              	.Ltext0:
  22              		.file 1 "../sudoku_2024.c"
 3071              	sudoku_status:
 3072 0000 00       		.space	1
 3073              		.global	errors
 3074 0001 000000   		.align	2
 3077              	errors:
 3078 0004 00000000 		.space	4
 3079              		.text
 3080              		.align	2
 3081              		.global	celda_poner_valor
 3083              	celda_poner_valor:
 3084              	.LFB0:
   1:../sudoku_2024.c **** #include "sudoku_2024.h"
   2:../sudoku_2024.c **** #include <stdio.h>
   3:../sudoku_2024.c **** #include <stdlib.h>
   4:../sudoku_2024.c **** #include "Bmp.h"
   5:../sudoku_2024.c **** #include "lcd.h"
   6:../sudoku_2024.c **** 
   7:../sudoku_2024.c **** volatile char *ready;
   8:../sudoku_2024.c **** volatile int celdas_vacias;
   9:../sudoku_2024.c **** volatile SudokuStates sudoku_status = NOT_STARTED;
  10:../sudoku_2024.c **** volatile int errors = 0;
  11:../sudoku_2024.c **** /* *****************************************************************************
  12:../sudoku_2024.c ****  * Funciones privadas (static)
  13:../sudoku_2024.c ****  * (no pueden ser invocadas desde otro fichero) */
  14:../sudoku_2024.c **** 
  15:../sudoku_2024.c **** /* modifica el valor almacenado en la celda indicada */
  16:../sudoku_2024.c **** extern void
  17:../sudoku_2024.c **** celda_poner_valor(CELDA *celdaptr, uint8_t val)
  18:../sudoku_2024.c **** {
 3085              		.loc 1 18 0
 3086              		.cfi_startproc
 3087              		@ Function supports interworking.
 3088              		@ args = 0, pretend = 0, frame = 8
 3089              		@ frame_needed = 1, uses_anonymous_args = 0
 3090 0000 0DC0A0E1 		mov	ip, sp
 3091              	.LCFI0:
 3092              		.cfi_def_cfa_register 12
 3093 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3094 0008 04B04CE2 		sub	fp, ip, #4
 3095              		.cfi_offset 14, -8
 3096              		.cfi_offset 13, -12
 3097              		.cfi_offset 11, -16
 3098              	.LCFI1:
 3099              		.cfi_def_cfa 11, 4
 3100 000c 08D04DE2 		sub	sp, sp, #8
 3101 0010 10000BE5 		str	r0, [fp, #-16]
 3102 0014 0130A0E1 		mov	r3, r1
 3103 0018 11304BE5 		strb	r3, [fp, #-17]
  19:../sudoku_2024.c **** 	*celdaptr = (*celdaptr & 0xFFF0) | (val & 0x000F);
 3104              		.loc 1 19 0
 3105 001c 10301BE5 		ldr	r3, [fp, #-16]
 3106 0020 B030D3E1 		ldrh	r3, [r3, #0]
 3107 0024 0338A0E1 		mov	r3, r3, asl #16
 3108 0028 2338A0E1 		mov	r3, r3, lsr #16
 3109 002c 0F30C3E3 		bic	r3, r3, #15
 3110 0030 0338A0E1 		mov	r3, r3, asl #16
 3111 0034 2328A0E1 		mov	r2, r3, lsr #16
 3112 0038 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3113 003c 0338A0E1 		mov	r3, r3, asl #16
 3114 0040 2338A0E1 		mov	r3, r3, lsr #16
 3115 0044 0F3003E2 		and	r3, r3, #15
 3116 0048 0338A0E1 		mov	r3, r3, asl #16
 3117 004c 2338A0E1 		mov	r3, r3, lsr #16
 3118 0050 033082E1 		orr	r3, r2, r3
 3119 0054 0338A0E1 		mov	r3, r3, asl #16
 3120 0058 2338A0E1 		mov	r3, r3, lsr #16
 3121 005c 0338A0E1 		mov	r3, r3, asl #16
 3122 0060 2328A0E1 		mov	r2, r3, lsr #16
 3123 0064 10301BE5 		ldr	r3, [fp, #-16]
 3124 0068 B020C3E1 		strh	r2, [r3, #0]	@ movhi
  20:../sudoku_2024.c **** }
 3125              		.loc 1 20 0
 3126 006c 0CD04BE2 		sub	sp, fp, #12
 3127 0070 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3128 0074 1EFF2FE1 		bx	lr
 3129              		.cfi_endproc
 3130              	.LFE0:
 3132              		.align	2
 3133              		.global	celda_leer_valor
 3135              	celda_leer_valor:
 3136              	.LFB1:
  21:../sudoku_2024.c **** 
  22:../sudoku_2024.c **** /* extrae el valor almacenado en los 16 bits de la celda */
  23:../sudoku_2024.c **** extern uint8_t
  24:../sudoku_2024.c **** celda_leer_valor(CELDA celda)
  25:../sudoku_2024.c **** {
 3137              		.loc 1 25 0
 3138              		.cfi_startproc
 3139              		@ Function supports interworking.
 3140              		@ args = 0, pretend = 0, frame = 8
 3141              		@ frame_needed = 1, uses_anonymous_args = 0
 3142 0078 0DC0A0E1 		mov	ip, sp
 3143              	.LCFI2:
 3144              		.cfi_def_cfa_register 12
 3145 007c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3146 0080 04B04CE2 		sub	fp, ip, #4
 3147              		.cfi_offset 14, -8
 3148              		.cfi_offset 13, -12
 3149              		.cfi_offset 11, -16
 3150              	.LCFI3:
 3151              		.cfi_def_cfa 11, 4
 3152 0084 08D04DE2 		sub	sp, sp, #8
 3153 0088 0030A0E1 		mov	r3, r0
 3154 008c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  26:../sudoku_2024.c **** 	return (celda & 0x000F);
 3155              		.loc 1 26 0
 3156 0090 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3157 0094 FF3003E2 		and	r3, r3, #255
 3158 0098 0F3003E2 		and	r3, r3, #15
 3159 009c FF3003E2 		and	r3, r3, #255
  27:../sudoku_2024.c **** }
 3160              		.loc 1 27 0
 3161 00a0 0300A0E1 		mov	r0, r3
 3162 00a4 0CD04BE2 		sub	sp, fp, #12
 3163 00a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3164 00ac 1EFF2FE1 		bx	lr
 3165              		.cfi_endproc
 3166              	.LFE1:
 3168              		.align	2
 3169              		.global	sudoku_candidatos_propagar_c
 3171              	sudoku_candidatos_propagar_c:
 3172              	.LFB2:
  28:../sudoku_2024.c **** 
  29:../sudoku_2024.c **** /* Propaga el valor de una determinada celda para actualizar las listas de candidatos en su fila, c
  30:../sudoku_2024.c **** extern void sudoku_candidatos_propagar_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int fila, int c
  31:../sudoku_2024.c **** {
 3173              		.loc 1 31 0
 3174              		.cfi_startproc
 3175              		@ Function supports interworking.
 3176              		@ args = 0, pretend = 0, frame = 48
 3177              		@ frame_needed = 1, uses_anonymous_args = 0
 3178 00b0 0DC0A0E1 		mov	ip, sp
 3179              	.LCFI4:
 3180              		.cfi_def_cfa_register 12
 3181 00b4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3182 00b8 04B04CE2 		sub	fp, ip, #4
 3183              		.cfi_offset 14, -8
 3184              		.cfi_offset 13, -12
 3185              		.cfi_offset 11, -16
 3186              	.LCFI5:
 3187              		.cfi_def_cfa 11, 4
 3188 00bc 30D04DE2 		sub	sp, sp, #48
 3189 00c0 30000BE5 		str	r0, [fp, #-48]
 3190 00c4 34100BE5 		str	r1, [fp, #-52]
 3191 00c8 38200BE5 		str	r2, [fp, #-56]
 3192 00cc 39304BE5 		strb	r3, [fp, #-57]
  32:../sudoku_2024.c **** 	if (valor != 0)
 3193              		.loc 1 32 0
 3194 00d0 39305BE5 		ldrb	r3, [fp, #-57]	@ zero_extendqisi2
 3195 00d4 000053E3 		cmp	r3, #0
 3196 00d8 B800000A 		beq	.L3
 3197              	.LBB2:
  33:../sudoku_2024.c **** 	{
  34:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3198              		.loc 1 34 0
 3199 00dc 39305BE5 		ldrb	r3, [fp, #-57]	@ zero_extendqisi2
 3200 00e0 033083E2 		add	r3, r3, #3
 3201 00e4 1C300BE5 		str	r3, [fp, #-28]
  35:../sudoku_2024.c **** 
  36:../sudoku_2024.c **** 		/* recorrer cada fila desactivando el candidato de la lista */
  37:../sudoku_2024.c **** 		int row = 0;
 3202              		.loc 1 37 0
 3203 00e8 0030A0E3 		mov	r3, #0
 3204 00ec 10300BE5 		str	r3, [fp, #-16]
  38:../sudoku_2024.c **** 		while (row < NUM_FILAS)
 3205              		.loc 1 38 0
 3206 00f0 2A0000EA 		b	.L5
 3207              	.L8:
 3208              	.LBB3:
  39:../sudoku_2024.c **** 		{
  40:../sudoku_2024.c **** 			uint16_t celda = cuadricula[row][columna];
 3209              		.loc 1 40 0
 3210 00f4 10301BE5 		ldr	r3, [fp, #-16]
 3211 00f8 8332A0E1 		mov	r3, r3, asl #5
 3212 00fc 30201BE5 		ldr	r2, [fp, #-48]
 3213 0100 032082E0 		add	r2, r2, r3
 3214 0104 38301BE5 		ldr	r3, [fp, #-56]
 3215 0108 8330A0E1 		mov	r3, r3, asl #1
 3216 010c 033082E0 		add	r3, r2, r3
 3217 0110 B030D3E1 		ldrh	r3, [r3, #0]	@ movhi
 3218 0114 BE314BE1 		strh	r3, [fp, #-30]	@ movhi
  41:../sudoku_2024.c **** 			if (((celda & 0x8000) != 0x8000) || row != fila)
 3219              		.loc 1 41 0
 3220 0118 BE315BE1 		ldrh	r3, [fp, #-30]
 3221 011c 0338A0E1 		mov	r3, r3, asl #16
 3222 0120 4338A0E1 		mov	r3, r3, asr #16
 3223 0124 000053E3 		cmp	r3, #0
 3224 0128 030000AA 		bge	.L6
 3225              		.loc 1 41 0 is_stmt 0 discriminator 1
 3226 012c 10201BE5 		ldr	r2, [fp, #-16]
 3227 0130 34301BE5 		ldr	r3, [fp, #-52]
 3228 0134 030052E1 		cmp	r2, r3
 3229 0138 1500000A 		beq	.L7
 3230              	.L6:
  42:../sudoku_2024.c **** 			{
  43:../sudoku_2024.c **** 				celda &= ~(1 << displace);
 3231              		.loc 1 43 0 is_stmt 1
 3232 013c 0120A0E3 		mov	r2, #1
 3233 0140 1C301BE5 		ldr	r3, [fp, #-28]
 3234 0144 1233A0E1 		mov	r3, r2, asl r3
 3235 0148 0338A0E1 		mov	r3, r3, asl #16
 3236 014c 2338A0E1 		mov	r3, r3, lsr #16
 3237 0150 0330E0E1 		mvn	r3, r3
 3238 0154 0338A0E1 		mov	r3, r3, asl #16
 3239 0158 2328A0E1 		mov	r2, r3, lsr #16
 3240 015c BE315BE1 		ldrh	r3, [fp, #-30]
 3241 0160 033002E0 		and	r3, r2, r3
 3242 0164 0338A0E1 		mov	r3, r3, asl #16
 3243 0168 2338A0E1 		mov	r3, r3, lsr #16
 3244 016c BE314BE1 		strh	r3, [fp, #-30]	@ movhi
  44:../sudoku_2024.c **** 				cuadricula[row][columna] = celda;
 3245              		.loc 1 44 0
 3246 0170 10301BE5 		ldr	r3, [fp, #-16]
 3247 0174 8332A0E1 		mov	r3, r3, asl #5
 3248 0178 30201BE5 		ldr	r2, [fp, #-48]
 3249 017c 032082E0 		add	r2, r2, r3
 3250 0180 38301BE5 		ldr	r3, [fp, #-56]
 3251 0184 8330A0E1 		mov	r3, r3, asl #1
 3252 0188 033082E0 		add	r3, r2, r3
 3253 018c BE215BE1 		ldrh	r2, [fp, #-30]	@ movhi
 3254 0190 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3255              	.L7:
  45:../sudoku_2024.c **** 			}
  46:../sudoku_2024.c **** 			row++;
 3256              		.loc 1 46 0
 3257 0194 10301BE5 		ldr	r3, [fp, #-16]
 3258 0198 013083E2 		add	r3, r3, #1
 3259 019c 10300BE5 		str	r3, [fp, #-16]
 3260              	.L5:
 3261              	.LBE3:
  38:../sudoku_2024.c **** 		while (row < NUM_FILAS)
 3262              		.loc 1 38 0 discriminator 1
 3263 01a0 10301BE5 		ldr	r3, [fp, #-16]
 3264 01a4 080053E3 		cmp	r3, #8
 3265 01a8 D1FFFFDA 		ble	.L8
  47:../sudoku_2024.c **** 		}
  48:../sudoku_2024.c **** 
  49:../sudoku_2024.c **** 		/* recorrer cada columna desactivando el candidato de la lista */
  50:../sudoku_2024.c **** 		int col = 0;
 3266              		.loc 1 50 0
 3267 01ac 0030A0E3 		mov	r3, #0
 3268 01b0 14300BE5 		str	r3, [fp, #-20]
  51:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3269              		.loc 1 51 0
 3270 01b4 2A0000EA 		b	.L9
 3271              	.L12:
 3272              	.LBB4:
  52:../sudoku_2024.c **** 		{
  53:../sudoku_2024.c **** 			uint16_t celda = cuadricula[fila][col];
 3273              		.loc 1 53 0
 3274 01b8 34301BE5 		ldr	r3, [fp, #-52]
 3275 01bc 8332A0E1 		mov	r3, r3, asl #5
 3276 01c0 30201BE5 		ldr	r2, [fp, #-48]
 3277 01c4 032082E0 		add	r2, r2, r3
 3278 01c8 14301BE5 		ldr	r3, [fp, #-20]
 3279 01cc 8330A0E1 		mov	r3, r3, asl #1
 3280 01d0 033082E0 		add	r3, r2, r3
 3281 01d4 B030D3E1 		ldrh	r3, [r3, #0]	@ movhi
 3282 01d8 B0324BE1 		strh	r3, [fp, #-32]	@ movhi
  54:../sudoku_2024.c **** 			if (((celda & 0x8000) != 0x8000) || col != columna)
 3283              		.loc 1 54 0
 3284 01dc B0325BE1 		ldrh	r3, [fp, #-32]
 3285 01e0 0338A0E1 		mov	r3, r3, asl #16
 3286 01e4 4338A0E1 		mov	r3, r3, asr #16
 3287 01e8 000053E3 		cmp	r3, #0
 3288 01ec 030000AA 		bge	.L10
 3289              		.loc 1 54 0 is_stmt 0 discriminator 1
 3290 01f0 14201BE5 		ldr	r2, [fp, #-20]
 3291 01f4 38301BE5 		ldr	r3, [fp, #-56]
 3292 01f8 030052E1 		cmp	r2, r3
 3293 01fc 1500000A 		beq	.L11
 3294              	.L10:
  55:../sudoku_2024.c **** 			{
  56:../sudoku_2024.c **** 				celda &= ~(1 << displace); // Desactivar el candidato de la lista con una operaci�n NAND
 3295              		.loc 1 56 0 is_stmt 1
 3296 0200 0120A0E3 		mov	r2, #1
 3297 0204 1C301BE5 		ldr	r3, [fp, #-28]
 3298 0208 1233A0E1 		mov	r3, r2, asl r3
 3299 020c 0338A0E1 		mov	r3, r3, asl #16
 3300 0210 2338A0E1 		mov	r3, r3, lsr #16
 3301 0214 0330E0E1 		mvn	r3, r3
 3302 0218 0338A0E1 		mov	r3, r3, asl #16
 3303 021c 2328A0E1 		mov	r2, r3, lsr #16
 3304 0220 B0325BE1 		ldrh	r3, [fp, #-32]
 3305 0224 033002E0 		and	r3, r2, r3
 3306 0228 0338A0E1 		mov	r3, r3, asl #16
 3307 022c 2338A0E1 		mov	r3, r3, lsr #16
 3308 0230 B0324BE1 		strh	r3, [fp, #-32]	@ movhi
  57:../sudoku_2024.c **** 				cuadricula[fila][col] = celda;
 3309              		.loc 1 57 0
 3310 0234 34301BE5 		ldr	r3, [fp, #-52]
 3311 0238 8332A0E1 		mov	r3, r3, asl #5
 3312 023c 30201BE5 		ldr	r2, [fp, #-48]
 3313 0240 032082E0 		add	r2, r2, r3
 3314 0244 14301BE5 		ldr	r3, [fp, #-20]
 3315 0248 8330A0E1 		mov	r3, r3, asl #1
 3316 024c 033082E0 		add	r3, r2, r3
 3317 0250 B0225BE1 		ldrh	r2, [fp, #-32]	@ movhi
 3318 0254 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3319              	.L11:
  58:../sudoku_2024.c **** 			}
  59:../sudoku_2024.c **** 			col++;
 3320              		.loc 1 59 0
 3321 0258 14301BE5 		ldr	r3, [fp, #-20]
 3322 025c 013083E2 		add	r3, r3, #1
 3323 0260 14300BE5 		str	r3, [fp, #-20]
 3324              	.L9:
 3325              	.LBE4:
  51:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3326              		.loc 1 51 0 discriminator 1
 3327 0264 14301BE5 		ldr	r3, [fp, #-20]
 3328 0268 080053E3 		cmp	r3, #8
 3329 026c D1FFFFDA 		ble	.L12
  60:../sudoku_2024.c **** 		}
  61:../sudoku_2024.c **** 
  62:../sudoku_2024.c **** 		/* Calcular la posicion inicial para cada region 3x3 correspondiente */
  63:../sudoku_2024.c **** 		int row_start = (fila / 3) * 3;
 3330              		.loc 1 63 0
 3331 0270 34301BE5 		ldr	r3, [fp, #-52]
 3332 0274 50219FE5 		ldr	r2, .L19
 3333 0278 9312C2E0 		smull	r1, r2, r3, r2
 3334 027c C33FA0E1 		mov	r3, r3, asr #31
 3335 0280 022063E0 		rsb	r2, r3, r2
 3336 0284 0230A0E1 		mov	r3, r2
 3337 0288 8330A0E1 		mov	r3, r3, asl #1
 3338 028c 023083E0 		add	r3, r3, r2
 3339 0290 24300BE5 		str	r3, [fp, #-36]
  64:../sudoku_2024.c **** 		int col_start = (columna / 3) * 3;
 3340              		.loc 1 64 0
 3341 0294 38301BE5 		ldr	r3, [fp, #-56]
 3342 0298 2C219FE5 		ldr	r2, .L19
 3343 029c 9312C2E0 		smull	r1, r2, r3, r2
 3344 02a0 C33FA0E1 		mov	r3, r3, asr #31
 3345 02a4 022063E0 		rsb	r2, r3, r2
 3346 02a8 0230A0E1 		mov	r3, r2
 3347 02ac 8330A0E1 		mov	r3, r3, asl #1
 3348 02b0 023083E0 		add	r3, r3, r2
 3349 02b4 28300BE5 		str	r3, [fp, #-40]
  65:../sudoku_2024.c **** 
  66:../sudoku_2024.c **** 		/* Recorrer la region desactivando el candidato de la lista */
  67:../sudoku_2024.c **** 		row = row_start;
 3350              		.loc 1 67 0
 3351 02b8 24301BE5 		ldr	r3, [fp, #-36]
 3352 02bc 10300BE5 		str	r3, [fp, #-16]
  68:../sudoku_2024.c **** 		while (row < (row_start + 3))
 3353              		.loc 1 68 0
 3354 02c0 390000EA 		b	.L13
 3355              	.L18:
 3356              	.LBB5:
  69:../sudoku_2024.c **** 		{
  70:../sudoku_2024.c **** 			int col = col_start;
 3357              		.loc 1 70 0
 3358 02c4 28301BE5 		ldr	r3, [fp, #-40]
 3359 02c8 18300BE5 		str	r3, [fp, #-24]
  71:../sudoku_2024.c **** 			while (col < (col_start + 3))
 3360              		.loc 1 71 0
 3361 02cc 2E0000EA 		b	.L14
 3362              	.L17:
 3363              	.LBB6:
  72:../sudoku_2024.c **** 			{
  73:../sudoku_2024.c **** 				uint16_t celda = cuadricula[row][col];
 3364              		.loc 1 73 0
 3365 02d0 10301BE5 		ldr	r3, [fp, #-16]
 3366 02d4 8332A0E1 		mov	r3, r3, asl #5
 3367 02d8 30201BE5 		ldr	r2, [fp, #-48]
 3368 02dc 032082E0 		add	r2, r2, r3
 3369 02e0 18301BE5 		ldr	r3, [fp, #-24]
 3370 02e4 8330A0E1 		mov	r3, r3, asl #1
 3371 02e8 033082E0 		add	r3, r2, r3
 3372 02ec B030D3E1 		ldrh	r3, [r3, #0]	@ movhi
 3373 02f0 BA324BE1 		strh	r3, [fp, #-42]	@ movhi
  74:../sudoku_2024.c **** 				if (((celda & 0x8000) != 0x8000) || row != fila || col != columna)
 3374              		.loc 1 74 0
 3375 02f4 BA325BE1 		ldrh	r3, [fp, #-42]
 3376 02f8 0338A0E1 		mov	r3, r3, asl #16
 3377 02fc 4338A0E1 		mov	r3, r3, asr #16
 3378 0300 000053E3 		cmp	r3, #0
 3379 0304 070000AA 		bge	.L15
 3380              		.loc 1 74 0 is_stmt 0 discriminator 1
 3381 0308 10201BE5 		ldr	r2, [fp, #-16]
 3382 030c 34301BE5 		ldr	r3, [fp, #-52]
 3383 0310 030052E1 		cmp	r2, r3
 3384 0314 0300001A 		bne	.L15
 3385 0318 18201BE5 		ldr	r2, [fp, #-24]
 3386 031c 38301BE5 		ldr	r3, [fp, #-56]
 3387 0320 030052E1 		cmp	r2, r3
 3388 0324 1500000A 		beq	.L16
 3389              	.L15:
  75:../sudoku_2024.c **** 				{
  76:../sudoku_2024.c **** 					celda &= ~(1 << displace);
 3390              		.loc 1 76 0 is_stmt 1
 3391 0328 0120A0E3 		mov	r2, #1
 3392 032c 1C301BE5 		ldr	r3, [fp, #-28]
 3393 0330 1233A0E1 		mov	r3, r2, asl r3
 3394 0334 0338A0E1 		mov	r3, r3, asl #16
 3395 0338 2338A0E1 		mov	r3, r3, lsr #16
 3396 033c 0330E0E1 		mvn	r3, r3
 3397 0340 0338A0E1 		mov	r3, r3, asl #16
 3398 0344 2328A0E1 		mov	r2, r3, lsr #16
 3399 0348 BA325BE1 		ldrh	r3, [fp, #-42]
 3400 034c 033002E0 		and	r3, r2, r3
 3401 0350 0338A0E1 		mov	r3, r3, asl #16
 3402 0354 2338A0E1 		mov	r3, r3, lsr #16
 3403 0358 BA324BE1 		strh	r3, [fp, #-42]	@ movhi
  77:../sudoku_2024.c **** 					cuadricula[row][col] = celda;
 3404              		.loc 1 77 0
 3405 035c 10301BE5 		ldr	r3, [fp, #-16]
 3406 0360 8332A0E1 		mov	r3, r3, asl #5
 3407 0364 30201BE5 		ldr	r2, [fp, #-48]
 3408 0368 032082E0 		add	r2, r2, r3
 3409 036c 18301BE5 		ldr	r3, [fp, #-24]
 3410 0370 8330A0E1 		mov	r3, r3, asl #1
 3411 0374 033082E0 		add	r3, r2, r3
 3412 0378 BA225BE1 		ldrh	r2, [fp, #-42]	@ movhi
 3413 037c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3414              	.L16:
  78:../sudoku_2024.c **** 				}
  79:../sudoku_2024.c **** 				col++;
 3415              		.loc 1 79 0
 3416 0380 18301BE5 		ldr	r3, [fp, #-24]
 3417 0384 013083E2 		add	r3, r3, #1
 3418 0388 18300BE5 		str	r3, [fp, #-24]
 3419              	.L14:
 3420              	.LBE6:
  71:../sudoku_2024.c **** 			while (col < (col_start + 3))
 3421              		.loc 1 71 0 discriminator 1
 3422 038c 28301BE5 		ldr	r3, [fp, #-40]
 3423 0390 032083E2 		add	r2, r3, #3
 3424 0394 18301BE5 		ldr	r3, [fp, #-24]
 3425 0398 030052E1 		cmp	r2, r3
 3426 039c CBFFFFCA 		bgt	.L17
  80:../sudoku_2024.c **** 			}
  81:../sudoku_2024.c **** 			row++;
 3427              		.loc 1 81 0
 3428 03a0 10301BE5 		ldr	r3, [fp, #-16]
 3429 03a4 013083E2 		add	r3, r3, #1
 3430 03a8 10300BE5 		str	r3, [fp, #-16]
 3431              	.L13:
 3432              	.LBE5:
  68:../sudoku_2024.c **** 		while (row < (row_start + 3))
 3433              		.loc 1 68 0 discriminator 1
 3434 03ac 24301BE5 		ldr	r3, [fp, #-36]
 3435 03b0 032083E2 		add	r2, r3, #3
 3436 03b4 10301BE5 		ldr	r3, [fp, #-16]
 3437 03b8 030052E1 		cmp	r2, r3
 3438 03bc C0FFFFCA 		bgt	.L18
 3439              	.L3:
 3440              	.LBE2:
  82:../sudoku_2024.c **** 		}
  83:../sudoku_2024.c **** 	}
  84:../sudoku_2024.c **** }
 3441              		.loc 1 84 0
 3442 03c0 0CD04BE2 		sub	sp, fp, #12
 3443 03c4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3444 03c8 1EFF2FE1 		bx	lr
 3445              	.L20:
 3446              		.align	2
 3447              	.L19:
 3448 03cc 56555555 		.word	1431655766
 3449              		.cfi_endproc
 3450              	.LFE2:
 3452              		.align	2
 3453              		.global	sudoku_candidatos_init_c
 3455              	sudoku_candidatos_init_c:
 3456              	.LFB3:
  85:../sudoku_2024.c **** /* *****************************************************************************
  86:../sudoku_2024.c ****  * calcula todas las listas de candidatos (9x9)
  87:../sudoku_2024.c ****  * necesario tras borrar o cambiar un valor (listas corrompidas)
  88:../sudoku_2024.c ****  * retorna el numero de celdas vacias */
  89:../sudoku_2024.c **** extern int
  90:../sudoku_2024.c **** sudoku_candidatos_init_c(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int version_propagar)
  91:../sudoku_2024.c **** {
 3457              		.loc 1 91 0
 3458              		.cfi_startproc
 3459              		@ Function supports interworking.
 3460              		@ args = 0, pretend = 0, frame = 32
 3461              		@ frame_needed = 1, uses_anonymous_args = 0
 3462 03d0 0DC0A0E1 		mov	ip, sp
 3463              	.LCFI6:
 3464              		.cfi_def_cfa_register 12
 3465 03d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3466 03d8 04B04CE2 		sub	fp, ip, #4
 3467              		.cfi_offset 14, -8
 3468              		.cfi_offset 13, -12
 3469              		.cfi_offset 11, -16
 3470              	.LCFI7:
 3471              		.cfi_def_cfa 11, 4
 3472 03dc 20D04DE2 		sub	sp, sp, #32
 3473 03e0 28000BE5 		str	r0, [fp, #-40]
 3474 03e4 2C100BE5 		str	r1, [fp, #-44]
  92:../sudoku_2024.c **** 	/* Recorrer la cuadricula celda a celda inicializando la lista de candidatos */
  93:../sudoku_2024.c **** 	int row = 0;
 3475              		.loc 1 93 0
 3476 03e8 0030A0E3 		mov	r3, #0
 3477 03ec 10300BE5 		str	r3, [fp, #-16]
  94:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 3478              		.loc 1 94 0
 3479 03f0 2C0000EA 		b	.L22
 3480              	.L26:
 3481              	.LBB7:
  95:../sudoku_2024.c **** 	{
  96:../sudoku_2024.c **** 		int col = 0;
 3482              		.loc 1 96 0
 3483 03f4 0030A0E3 		mov	r3, #0
 3484 03f8 14300BE5 		str	r3, [fp, #-20]
  97:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3485              		.loc 1 97 0
 3486 03fc 230000EA 		b	.L23
 3487              	.L25:
 3488              	.LBB8:
  98:../sudoku_2024.c **** 		{
  99:../sudoku_2024.c **** 			int pista = cuadricula[row][col] & 0x8000;
 3489              		.loc 1 99 0
 3490 0400 10301BE5 		ldr	r3, [fp, #-16]
 3491 0404 8332A0E1 		mov	r3, r3, asl #5
 3492 0408 28201BE5 		ldr	r2, [fp, #-40]
 3493 040c 032082E0 		add	r2, r2, r3
 3494 0410 14301BE5 		ldr	r3, [fp, #-20]
 3495 0414 8330A0E1 		mov	r3, r3, asl #1
 3496 0418 033082E0 		add	r3, r2, r3
 3497 041c B030D3E1 		ldrh	r3, [r3, #0]
 3498 0420 023903E2 		and	r3, r3, #32768
 3499 0424 20300BE5 		str	r3, [fp, #-32]
 100:../sudoku_2024.c **** 			if (pista == 0)
 3500              		.loc 1 100 0
 3501 0428 20301BE5 		ldr	r3, [fp, #-32]
 3502 042c 000053E3 		cmp	r3, #0
 3503 0430 1300001A 		bne	.L24
 101:../sudoku_2024.c **** 			{
 102:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x1FF0;
 3504              		.loc 1 102 0
 3505 0434 10301BE5 		ldr	r3, [fp, #-16]
 3506 0438 8332A0E1 		mov	r3, r3, asl #5
 3507 043c 28201BE5 		ldr	r2, [fp, #-40]
 3508 0440 031082E0 		add	r1, r2, r3
 3509 0444 10301BE5 		ldr	r3, [fp, #-16]
 3510 0448 8332A0E1 		mov	r3, r3, asl #5
 3511 044c 28201BE5 		ldr	r2, [fp, #-40]
 3512 0450 032082E0 		add	r2, r2, r3
 3513 0454 14301BE5 		ldr	r3, [fp, #-20]
 3514 0458 8330A0E1 		mov	r3, r3, asl #1
 3515 045c 033082E0 		add	r3, r2, r3
 3516 0460 B030D3E1 		ldrh	r3, [r3, #0]
 3517 0464 7F3D83E3 		orr	r3, r3, #8128
 3518 0468 303083E3 		orr	r3, r3, #48
 3519 046c 0338A0E1 		mov	r3, r3, asl #16
 3520 0470 2328A0E1 		mov	r2, r3, lsr #16
 3521 0474 14301BE5 		ldr	r3, [fp, #-20]
 3522 0478 8330A0E1 		mov	r3, r3, asl #1
 3523 047c 033081E0 		add	r3, r1, r3
 3524 0480 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3525              	.L24:
 103:../sudoku_2024.c **** 			}
 104:../sudoku_2024.c **** 			col++;
 3526              		.loc 1 104 0
 3527 0484 14301BE5 		ldr	r3, [fp, #-20]
 3528 0488 013083E2 		add	r3, r3, #1
 3529 048c 14300BE5 		str	r3, [fp, #-20]
 3530              	.L23:
 3531              	.LBE8:
  97:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3532              		.loc 1 97 0 discriminator 1
 3533 0490 14301BE5 		ldr	r3, [fp, #-20]
 3534 0494 080053E3 		cmp	r3, #8
 3535 0498 D8FFFFDA 		ble	.L25
 105:../sudoku_2024.c **** 		}
 106:../sudoku_2024.c **** 		row++;
 3536              		.loc 1 106 0
 3537 049c 10301BE5 		ldr	r3, [fp, #-16]
 3538 04a0 013083E2 		add	r3, r3, #1
 3539 04a4 10300BE5 		str	r3, [fp, #-16]
 3540              	.L22:
 3541              	.LBE7:
  94:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 3542              		.loc 1 94 0 discriminator 1
 3543 04a8 10301BE5 		ldr	r3, [fp, #-16]
 3544 04ac 080053E3 		cmp	r3, #8
 3545 04b0 CFFFFFDA 		ble	.L26
 107:../sudoku_2024.c **** 	}
 108:../sudoku_2024.c **** 
 109:../sudoku_2024.c **** 	/* Recorer la cuadricula celda a celda:
 110:../sudoku_2024.c **** 	 * Si la celda tiene valor => sudoku_candidatos_propagar_c
 111:../sudoku_2024.c **** 	 * Si no tiene valor => actualizar contador de celdas vac�as
 112:../sudoku_2024.c **** 	 */
 113:../sudoku_2024.c **** 	int celdas_vacias = 0;
 3546              		.loc 1 113 0
 3547 04b4 0030A0E3 		mov	r3, #0
 3548 04b8 18300BE5 		str	r3, [fp, #-24]
 114:../sudoku_2024.c **** 	row = 0;
 3549              		.loc 1 114 0
 3550 04bc 0030A0E3 		mov	r3, #0
 3551 04c0 10300BE5 		str	r3, [fp, #-16]
 115:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 3552              		.loc 1 115 0
 3553 04c4 300000EA 		b	.L27
 3554              	.L33:
 3555              	.LBB9:
 116:../sudoku_2024.c **** 	{
 117:../sudoku_2024.c **** 		int col = 0;
 3556              		.loc 1 117 0
 3557 04c8 0030A0E3 		mov	r3, #0
 3558 04cc 1C300BE5 		str	r3, [fp, #-28]
 118:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3559              		.loc 1 118 0
 3560 04d0 270000EA 		b	.L28
 3561              	.L32:
 3562              	.LBB10:
 119:../sudoku_2024.c **** 		{
 120:../sudoku_2024.c **** 			uint8_t valor_actual = celda_leer_valor(cuadricula[row][col]);
 3563              		.loc 1 120 0
 3564 04d4 10301BE5 		ldr	r3, [fp, #-16]
 3565 04d8 8332A0E1 		mov	r3, r3, asl #5
 3566 04dc 28201BE5 		ldr	r2, [fp, #-40]
 3567 04e0 032082E0 		add	r2, r2, r3
 3568 04e4 1C301BE5 		ldr	r3, [fp, #-28]
 3569 04e8 8330A0E1 		mov	r3, r3, asl #1
 3570 04ec 033082E0 		add	r3, r2, r3
 3571 04f0 B030D3E1 		ldrh	r3, [r3, #0]
 3572 04f4 0300A0E1 		mov	r0, r3
 3573 04f8 FEFFFFEB 		bl	celda_leer_valor
 3574 04fc 0030A0E1 		mov	r3, r0
 3575 0500 21304BE5 		strb	r3, [fp, #-33]
 121:../sudoku_2024.c **** 			if (valor_actual == 0x0000)
 3576              		.loc 1 121 0
 3577 0504 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3578 0508 000053E3 		cmp	r3, #0
 3579 050c 0300001A 		bne	.L29
 122:../sudoku_2024.c **** 			{
 123:../sudoku_2024.c **** 				celdas_vacias++;
 3580              		.loc 1 123 0
 3581 0510 18301BE5 		ldr	r3, [fp, #-24]
 3582 0514 013083E2 		add	r3, r3, #1
 3583 0518 18300BE5 		str	r3, [fp, #-24]
 3584 051c 110000EA 		b	.L30
 3585              	.L29:
 124:../sudoku_2024.c **** 			}
 125:../sudoku_2024.c **** 			else
 126:../sudoku_2024.c **** 			{
 127:../sudoku_2024.c **** 				if (version_propagar == 0)
 3586              		.loc 1 127 0
 3587 0520 2C301BE5 		ldr	r3, [fp, #-44]
 3588 0524 000053E3 		cmp	r3, #0
 3589 0528 0400001A 		bne	.L31
 128:../sudoku_2024.c **** 				{
 129:../sudoku_2024.c **** 					sudoku_candidatos_propagar_c(cuadricula, row, col, valor_actual);
 3590              		.loc 1 129 0
 3591 052c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3592 0530 28001BE5 		ldr	r0, [fp, #-40]
 3593 0534 10101BE5 		ldr	r1, [fp, #-16]
 3594 0538 1C201BE5 		ldr	r2, [fp, #-28]
 3595 053c FEFFFFEB 		bl	sudoku_candidatos_propagar_c
 3596              	.L31:
 130:../sudoku_2024.c **** 				}
 131:../sudoku_2024.c **** 				if (version_propagar == 1)
 3597              		.loc 1 131 0
 3598 0540 2C301BE5 		ldr	r3, [fp, #-44]
 3599 0544 010053E3 		cmp	r3, #1
 3600 0548 0600001A 		bne	.L30
 132:../sudoku_2024.c **** 				{
 133:../sudoku_2024.c **** 					sudoku_candidatos_propagar_arm(cuadricula, row, col, valor_actual);
 3601              		.loc 1 133 0
 3602 054c 10301BE5 		ldr	r3, [fp, #-16]
 3603 0550 FF1003E2 		and	r1, r3, #255
 3604 0554 1C301BE5 		ldr	r3, [fp, #-28]
 3605 0558 FF2003E2 		and	r2, r3, #255
 3606 055c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3607 0560 28001BE5 		ldr	r0, [fp, #-40]
 3608 0564 FEFFFFEB 		bl	sudoku_candidatos_propagar_arm
 3609              	.L30:
 134:../sudoku_2024.c **** 				}
 135:../sudoku_2024.c **** 				if (version_propagar == 2)
 136:../sudoku_2024.c **** 				{
 137:../sudoku_2024.c **** 					//					sudoku_candidatos_propagar_thumb(cuadricula, row, col, valor_actual);
 138:../sudoku_2024.c **** 				}
 139:../sudoku_2024.c **** 			}
 140:../sudoku_2024.c **** 			col++;
 3610              		.loc 1 140 0
 3611 0568 1C301BE5 		ldr	r3, [fp, #-28]
 3612 056c 013083E2 		add	r3, r3, #1
 3613 0570 1C300BE5 		str	r3, [fp, #-28]
 3614              	.L28:
 3615              	.LBE10:
 118:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 3616              		.loc 1 118 0 discriminator 1
 3617 0574 1C301BE5 		ldr	r3, [fp, #-28]
 3618 0578 080053E3 		cmp	r3, #8
 3619 057c D4FFFFDA 		ble	.L32
 141:../sudoku_2024.c **** 		}
 142:../sudoku_2024.c **** 		row++;
 3620              		.loc 1 142 0
 3621 0580 10301BE5 		ldr	r3, [fp, #-16]
 3622 0584 013083E2 		add	r3, r3, #1
 3623 0588 10300BE5 		str	r3, [fp, #-16]
 3624              	.L27:
 3625              	.LBE9:
 115:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 3626              		.loc 1 115 0 discriminator 1
 3627 058c 10301BE5 		ldr	r3, [fp, #-16]
 3628 0590 080053E3 		cmp	r3, #8
 3629 0594 CBFFFFDA 		ble	.L33
 143:../sudoku_2024.c **** 	}
 144:../sudoku_2024.c **** 
 145:../sudoku_2024.c **** 	return celdas_vacias;
 3630              		.loc 1 145 0
 3631 0598 18301BE5 		ldr	r3, [fp, #-24]
 146:../sudoku_2024.c **** }
 3632              		.loc 1 146 0
 3633 059c 0300A0E1 		mov	r0, r3
 3634 05a0 0CD04BE2 		sub	sp, fp, #12
 3635 05a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3636 05a8 1EFF2FE1 		bx	lr
 3637              		.cfi_endproc
 3638              	.LFE3:
 3640              		.align	2
 3641              		.global	cuadricula_candidatos_verificar
 3643              	cuadricula_candidatos_verificar:
 3644              	.LFB4:
 147:../sudoku_2024.c **** 
 148:../sudoku_2024.c **** extern void
 149:../sudoku_2024.c **** cuadricula_candidatos_verificar(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], int row, int col)
 150:../sudoku_2024.c **** {
 3645              		.loc 1 150 0
 3646              		.cfi_startproc
 3647              		@ Function supports interworking.
 3648              		@ args = 0, pretend = 0, frame = 24
 3649              		@ frame_needed = 1, uses_anonymous_args = 0
 3650 05ac 0DC0A0E1 		mov	ip, sp
 3651              	.LCFI8:
 3652              		.cfi_def_cfa_register 12
 3653 05b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3654 05b4 04B04CE2 		sub	fp, ip, #4
 3655              		.cfi_offset 14, -8
 3656              		.cfi_offset 13, -12
 3657              		.cfi_offset 11, -16
 3658              	.LCFI9:
 3659              		.cfi_def_cfa 11, 4
 3660 05b8 18D04DE2 		sub	sp, sp, #24
 3661 05bc 18000BE5 		str	r0, [fp, #-24]
 3662 05c0 1C100BE5 		str	r1, [fp, #-28]
 3663 05c4 20200BE5 		str	r2, [fp, #-32]
 151:../sudoku_2024.c **** 
 152:../sudoku_2024.c **** 	uint8_t valor = celda_leer_valor(cuadricula[row][col]);
 3664              		.loc 1 152 0
 3665 05c8 1C301BE5 		ldr	r3, [fp, #-28]
 3666 05cc 8332A0E1 		mov	r3, r3, asl #5
 3667 05d0 18201BE5 		ldr	r2, [fp, #-24]
 3668 05d4 032082E0 		add	r2, r2, r3
 3669 05d8 20301BE5 		ldr	r3, [fp, #-32]
 3670 05dc 8330A0E1 		mov	r3, r3, asl #1
 3671 05e0 033082E0 		add	r3, r2, r3
 3672 05e4 B030D3E1 		ldrh	r3, [r3, #0]
 3673 05e8 0300A0E1 		mov	r0, r3
 3674 05ec FEFFFFEB 		bl	celda_leer_valor
 3675 05f0 0030A0E1 		mov	r3, r0
 3676 05f4 0D304BE5 		strb	r3, [fp, #-13]
 153:../sudoku_2024.c **** 
 154:../sudoku_2024.c **** 	/* Si el valor es distinto de 0, revisa que si dicho valor esta en la lista de candidatos) */
 155:../sudoku_2024.c **** 
 156:../sudoku_2024.c **** 	if ((cuadricula[row][col] & 0x8000) == 0) // Verifica solo las celdas que no sean una pista
 3677              		.loc 1 156 0
 3678 05f8 1C301BE5 		ldr	r3, [fp, #-28]
 3679 05fc 8332A0E1 		mov	r3, r3, asl #5
 3680 0600 18201BE5 		ldr	r2, [fp, #-24]
 3681 0604 032082E0 		add	r2, r2, r3
 3682 0608 20301BE5 		ldr	r3, [fp, #-32]
 3683 060c 8330A0E1 		mov	r3, r3, asl #1
 3684 0610 033082E0 		add	r3, r2, r3
 3685 0614 B030D3E1 		ldrh	r3, [r3, #0]
 3686 0618 0338A0E1 		mov	r3, r3, asl #16
 3687 061c 2338A0E1 		mov	r3, r3, lsr #16
 3688 0620 0338A0E1 		mov	r3, r3, asl #16
 3689 0624 4338A0E1 		mov	r3, r3, asr #16
 3690 0628 000053E3 		cmp	r3, #0
 3691 062c 530000BA 		blt	.L34
 3692              	.LBB11:
 157:../sudoku_2024.c **** 	{
 158:../sudoku_2024.c **** 		int displace = 3 + (int)valor;
 3693              		.loc 1 158 0
 3694 0630 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3695 0634 033083E2 		add	r3, r3, #3
 3696 0638 14300BE5 		str	r3, [fp, #-20]
 159:../sudoku_2024.c **** 
 160:../sudoku_2024.c **** 		if (valor != 0x0000) // Si el valor ingresado es distinto de 0, se verifica que este en la lista 
 3697              		.loc 1 160 0
 3698 063c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3699 0640 000053E3 		cmp	r3, #0
 3700 0644 3A00000A 		beq	.L36
 161:../sudoku_2024.c **** 		{
 162:../sudoku_2024.c **** 			if ((cuadricula[row][col] & (1 << displace)) == 0) // Si el valor no pertenece a los posibles ca
 3701              		.loc 1 162 0
 3702 0648 1C301BE5 		ldr	r3, [fp, #-28]
 3703 064c 8332A0E1 		mov	r3, r3, asl #5
 3704 0650 18201BE5 		ldr	r2, [fp, #-24]
 3705 0654 032082E0 		add	r2, r2, r3
 3706 0658 20301BE5 		ldr	r3, [fp, #-32]
 3707 065c 8330A0E1 		mov	r3, r3, asl #1
 3708 0660 033082E0 		add	r3, r2, r3
 3709 0664 B030D3E1 		ldrh	r3, [r3, #0]
 3710 0668 0320A0E1 		mov	r2, r3
 3711 066c 14301BE5 		ldr	r3, [fp, #-20]
 3712 0670 5233A0E1 		mov	r3, r2, asr r3
 3713 0674 013003E2 		and	r3, r3, #1
 3714 0678 000053E3 		cmp	r3, #0
 3715 067c 1800001A 		bne	.L37
 163:../sudoku_2024.c **** 			{
 164:../sudoku_2024.c **** 				cuadricula[row][col] |= 0x4000;
 3716              		.loc 1 164 0
 3717 0680 1C301BE5 		ldr	r3, [fp, #-28]
 3718 0684 8332A0E1 		mov	r3, r3, asl #5
 3719 0688 18201BE5 		ldr	r2, [fp, #-24]
 3720 068c 031082E0 		add	r1, r2, r3
 3721 0690 1C301BE5 		ldr	r3, [fp, #-28]
 3722 0694 8332A0E1 		mov	r3, r3, asl #5
 3723 0698 18201BE5 		ldr	r2, [fp, #-24]
 3724 069c 032082E0 		add	r2, r2, r3
 3725 06a0 20301BE5 		ldr	r3, [fp, #-32]
 3726 06a4 8330A0E1 		mov	r3, r3, asl #1
 3727 06a8 033082E0 		add	r3, r2, r3
 3728 06ac B030D3E1 		ldrh	r3, [r3, #0]
 3729 06b0 013983E3 		orr	r3, r3, #16384
 3730 06b4 0338A0E1 		mov	r3, r3, asl #16
 3731 06b8 2328A0E1 		mov	r2, r3, lsr #16
 3732 06bc 20301BE5 		ldr	r3, [fp, #-32]
 3733 06c0 8330A0E1 		mov	r3, r3, asl #1
 3734 06c4 033081E0 		add	r3, r1, r3
 3735 06c8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 165:../sudoku_2024.c **** 				errors++;
 3736              		.loc 1 165 0
 3737 06cc B8309FE5 		ldr	r3, .L38
 3738 06d0 003093E5 		ldr	r3, [r3, #0]
 3739 06d4 012083E2 		add	r2, r3, #1
 3740 06d8 AC309FE5 		ldr	r3, .L38
 3741 06dc 002083E5 		str	r2, [r3, #0]
 3742 06e0 260000EA 		b	.L34
 3743              	.L37:
 166:../sudoku_2024.c **** 			}
 167:../sudoku_2024.c **** 			else
 168:../sudoku_2024.c **** 			{
 169:../sudoku_2024.c **** 				cuadricula[row][col] &= ~0x4000;
 3744              		.loc 1 169 0
 3745 06e4 1C301BE5 		ldr	r3, [fp, #-28]
 3746 06e8 8332A0E1 		mov	r3, r3, asl #5
 3747 06ec 18201BE5 		ldr	r2, [fp, #-24]
 3748 06f0 031082E0 		add	r1, r2, r3
 3749 06f4 1C301BE5 		ldr	r3, [fp, #-28]
 3750 06f8 8332A0E1 		mov	r3, r3, asl #5
 3751 06fc 18201BE5 		ldr	r2, [fp, #-24]
 3752 0700 032082E0 		add	r2, r2, r3
 3753 0704 20301BE5 		ldr	r3, [fp, #-32]
 3754 0708 8330A0E1 		mov	r3, r3, asl #1
 3755 070c 033082E0 		add	r3, r2, r3
 3756 0710 B030D3E1 		ldrh	r3, [r3, #0]
 3757 0714 0139C3E3 		bic	r3, r3, #16384
 3758 0718 0338A0E1 		mov	r3, r3, asl #16
 3759 071c 2328A0E1 		mov	r2, r3, lsr #16
 3760 0720 20301BE5 		ldr	r3, [fp, #-32]
 3761 0724 8330A0E1 		mov	r3, r3, asl #1
 3762 0728 033081E0 		add	r3, r1, r3
 3763 072c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3764 0730 120000EA 		b	.L34
 3765              	.L36:
 170:../sudoku_2024.c **** 			}
 171:../sudoku_2024.c **** 		}
 172:../sudoku_2024.c **** 		else // Si se limpia la celda (poner valor = 0) se limpia el bit de error
 173:../sudoku_2024.c **** 		{
 174:../sudoku_2024.c **** 			cuadricula[row][col] &= ~0x4000;
 3766              		.loc 1 174 0
 3767 0734 1C301BE5 		ldr	r3, [fp, #-28]
 3768 0738 8332A0E1 		mov	r3, r3, asl #5
 3769 073c 18201BE5 		ldr	r2, [fp, #-24]
 3770 0740 031082E0 		add	r1, r2, r3
 3771 0744 1C301BE5 		ldr	r3, [fp, #-28]
 3772 0748 8332A0E1 		mov	r3, r3, asl #5
 3773 074c 18201BE5 		ldr	r2, [fp, #-24]
 3774 0750 032082E0 		add	r2, r2, r3
 3775 0754 20301BE5 		ldr	r3, [fp, #-32]
 3776 0758 8330A0E1 		mov	r3, r3, asl #1
 3777 075c 033082E0 		add	r3, r2, r3
 3778 0760 B030D3E1 		ldrh	r3, [r3, #0]
 3779 0764 0139C3E3 		bic	r3, r3, #16384
 3780 0768 0338A0E1 		mov	r3, r3, asl #16
 3781 076c 2328A0E1 		mov	r2, r3, lsr #16
 3782 0770 20301BE5 		ldr	r3, [fp, #-32]
 3783 0774 8330A0E1 		mov	r3, r3, asl #1
 3784 0778 033081E0 		add	r3, r1, r3
 3785 077c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3786              	.L34:
 3787              	.LBE11:
 175:../sudoku_2024.c **** 		}
 176:../sudoku_2024.c **** 	}
 177:../sudoku_2024.c **** }
 3788              		.loc 1 177 0
 3789 0780 0CD04BE2 		sub	sp, fp, #12
 3790 0784 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3791 0788 1EFF2FE1 		bx	lr
 3792              	.L39:
 3793              		.align	2
 3794              	.L38:
 3795 078c 00000000 		.word	errors
 3796              		.cfi_endproc
 3797              	.LFE4:
 3799              		.section	.rodata
 3800              		.align	2
 3801              	.LC0:
 3802 0000 5469656D 		.ascii	"Tiempo: \000"
 3802      706F3A20 
 3802      00
 3803 0009 000000   		.align	2
 3804              	.LC1:
 3805 000c 7800     		.ascii	"x\000"
 3806 000e 0000     		.align	2
 3807              	.LC2:
 3808 0010 6500     		.ascii	"e\000"
 3809 0012 0000     		.text
 3810              		.align	2
 3811              		.global	LCD_mostrar_sudoku
 3813              	LCD_mostrar_sudoku:
 3814              	.LFB5:
 178:../sudoku_2024.c **** /*********************************************************************************************
 179:../sudoku_2024.c ****  * name:		LCD_mostrar_sudoku()
 180:../sudoku_2024.c ****  * func:		Muestra la cuadricula del sudoku en la pantalla LCD
 181:../sudoku_2024.c ****  * desc:		Imprime la cuadricula 9x9 y los candidatos 3x3 de cada celda.
 182:../sudoku_2024.c ****  * 					Si la celda tiene un valor, lo imprime en el centro de la celda.
 183:../sudoku_2024.c ****  * 					Si la celda no tiene valor, imprime los candidatos.
 184:../sudoku_2024.c ****  *          Si la celda contiene un error, imprime una "E" en la celda.
 185:../sudoku_2024.c ****  *********************************************************************************************/
 186:../sudoku_2024.c **** extern void LCD_mostrar_sudoku(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 187:../sudoku_2024.c **** {
 3815              		.loc 1 187 0
 3816              		.cfi_startproc
 3817              		@ Function supports interworking.
 3818              		@ args = 0, pretend = 0, frame = 80
 3819              		@ frame_needed = 1, uses_anonymous_args = 0
 3820 0790 0DC0A0E1 		mov	ip, sp
 3821              	.LCFI10:
 3822              		.cfi_def_cfa_register 12
 3823 0794 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3824 0798 04B04CE2 		sub	fp, ip, #4
 3825              		.cfi_offset 14, -8
 3826              		.cfi_offset 13, -12
 3827              		.cfi_offset 11, -16
 3828              	.LCFI11:
 3829              		.cfi_def_cfa 11, 4
 3830 079c 58D04DE2 		sub	sp, sp, #88
 3831 07a0 58000BE5 		str	r0, [fp, #-88]
 188:../sudoku_2024.c **** 	Lcd_Clr();
 3832              		.loc 1 188 0
 3833 07a4 FEFFFFEB 		bl	Lcd_Clr
 189:../sudoku_2024.c **** 	Lcd_Active_Clr();
 3834              		.loc 1 189 0
 3835 07a8 FEFFFFEB 		bl	Lcd_Active_Clr
 190:../sudoku_2024.c **** 	Lcd_DspAscII8x16(5, 5, BLACK, "Tiempo: ");
 3836              		.loc 1 190 0
 3837 07ac 0500A0E3 		mov	r0, #5
 3838 07b0 0510A0E3 		mov	r1, #5
 3839 07b4 0F20A0E3 		mov	r2, #15
 3840 07b8 A4359FE5 		ldr	r3, .L58
 3841 07bc FEFFFFEB 		bl	Lcd_DspAscII8x16
 191:../sudoku_2024.c **** 
 192:../sudoku_2024.c **** 	int i, j, k, l;
 193:../sudoku_2024.c **** 
 194:../sudoku_2024.c **** 	// Numeración de filas
 195:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++)
 3842              		.loc 1 195 0
 3843 07c0 0030A0E3 		mov	r3, #0
 3844 07c4 10300BE5 		str	r3, [fp, #-16]
 3845 07c8 210000EA 		b	.L41
 3846              	.L42:
 3847              	.LBB12:
 196:../sudoku_2024.c **** 	{
 197:../sudoku_2024.c **** 		INT16 filaX = 25;							 // Desplazamos los números de las filas un poco más a la izquierda
 3848              		.loc 1 197 0 discriminator 2
 3849 07cc 1930A0E3 		mov	r3, #25
 3850 07d0 BE314BE1 		strh	r3, [fp, #-30]	@ movhi
 198:../sudoku_2024.c **** 		INT16 filaY = 28 + 22 * i + 8; // Bajamos los números de las filas para centrarlos más
 3851              		.loc 1 198 0 discriminator 2
 3852 07d4 10301BE5 		ldr	r3, [fp, #-16]
 3853 07d8 0338A0E1 		mov	r3, r3, asl #16
 3854 07dc 2338A0E1 		mov	r3, r3, lsr #16
 3855 07e0 0320A0E1 		mov	r2, r3	@ movhi
 3856 07e4 0221A0E1 		mov	r2, r2, asl #2
 3857 07e8 032082E0 		add	r2, r2, r3
 3858 07ec 8220A0E1 		mov	r2, r2, asl #1
 3859 07f0 033082E0 		add	r3, r2, r3
 3860 07f4 8330A0E1 		mov	r3, r3, asl #1
 3861 07f8 0338A0E1 		mov	r3, r3, asl #16
 3862 07fc 2338A0E1 		mov	r3, r3, lsr #16
 3863 0800 243083E2 		add	r3, r3, #36
 3864 0804 0338A0E1 		mov	r3, r3, asl #16
 3865 0808 2338A0E1 		mov	r3, r3, lsr #16
 3866 080c B0324BE1 		strh	r3, [fp, #-32]	@ movhi
 199:../sudoku_2024.c **** 		char filaValor[2] = {i + '1', '\0'};
 3867              		.loc 1 199 0 discriminator 2
 3868 0810 10301BE5 		ldr	r3, [fp, #-16]
 3869 0814 FF3003E2 		and	r3, r3, #255
 3870 0818 313083E2 		add	r3, r3, #49
 3871 081c FF3003E2 		and	r3, r3, #255
 3872 0820 4C304BE5 		strb	r3, [fp, #-76]
 3873 0824 0030A0E3 		mov	r3, #0
 3874 0828 4B304BE5 		strb	r3, [fp, #-75]
 200:../sudoku_2024.c **** 		Lcd_DspAscII8x16(filaX, filaY, BLACK, filaValor);
 3875              		.loc 1 200 0 discriminator 2
 3876 082c BE115BE1 		ldrh	r1, [fp, #-30]
 3877 0830 B0225BE1 		ldrh	r2, [fp, #-32]
 3878 0834 4C304BE2 		sub	r3, fp, #76
 3879 0838 0100A0E1 		mov	r0, r1
 3880 083c 0210A0E1 		mov	r1, r2
 3881 0840 0F20A0E3 		mov	r2, #15
 3882 0844 FEFFFFEB 		bl	Lcd_DspAscII8x16
 3883              	.LBE12:
 195:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++)
 3884              		.loc 1 195 0 discriminator 2
 3885 0848 10301BE5 		ldr	r3, [fp, #-16]
 3886 084c 013083E2 		add	r3, r3, #1
 3887 0850 10300BE5 		str	r3, [fp, #-16]
 3888              	.L41:
 195:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++)
 3889              		.loc 1 195 0 is_stmt 0 discriminator 1
 3890 0854 10301BE5 		ldr	r3, [fp, #-16]
 3891 0858 080053E3 		cmp	r3, #8
 3892 085c DAFFFFDA 		ble	.L42
 201:../sudoku_2024.c **** 	}
 202:../sudoku_2024.c **** 
 203:../sudoku_2024.c **** 	// Numeración de columnas
 204:../sudoku_2024.c **** 	for (j = 0; j < NUM_COLUMNAS - 7; j++) // Excluye las columnas extra
 3893              		.loc 1 204 0 is_stmt 1
 3894 0860 0030A0E3 		mov	r3, #0
 3895 0864 14300BE5 		str	r3, [fp, #-20]
 3896 0868 1F0000EA 		b	.L43
 3897              	.L44:
 3898              	.LBB13:
 205:../sudoku_2024.c **** 	{
 206:../sudoku_2024.c **** 		INT16 colX = 35 + 30 * j + 12; // Ajuste para mover la numeración de las columnas más a la dere
 3899              		.loc 1 206 0 discriminator 2
 3900 086c 14301BE5 		ldr	r3, [fp, #-20]
 3901 0870 0338A0E1 		mov	r3, r3, asl #16
 3902 0874 2338A0E1 		mov	r3, r3, lsr #16
 3903 0878 0320A0E1 		mov	r2, r3	@ movhi
 3904 087c 0222A0E1 		mov	r2, r2, asl #4
 3905 0880 023063E0 		rsb	r3, r3, r2
 3906 0884 8330A0E1 		mov	r3, r3, asl #1
 3907 0888 0338A0E1 		mov	r3, r3, asl #16
 3908 088c 2338A0E1 		mov	r3, r3, lsr #16
 3909 0890 2F3083E2 		add	r3, r3, #47
 3910 0894 0338A0E1 		mov	r3, r3, asl #16
 3911 0898 2338A0E1 		mov	r3, r3, lsr #16
 3912 089c B2324BE1 		strh	r3, [fp, #-34]	@ movhi
 207:../sudoku_2024.c **** 		INT16 colY = 20;							 // Subimos los números de las columnas para que no estén sobre la cuadr
 3913              		.loc 1 207 0 discriminator 2
 3914 08a0 1430A0E3 		mov	r3, #20
 3915 08a4 B4324BE1 		strh	r3, [fp, #-36]	@ movhi
 208:../sudoku_2024.c **** 		char colValor[2] = {j + '1', '\0'};
 3916              		.loc 1 208 0 discriminator 2
 3917 08a8 14301BE5 		ldr	r3, [fp, #-20]
 3918 08ac FF3003E2 		and	r3, r3, #255
 3919 08b0 313083E2 		add	r3, r3, #49
 3920 08b4 FF3003E2 		and	r3, r3, #255
 3921 08b8 50304BE5 		strb	r3, [fp, #-80]
 3922 08bc 0030A0E3 		mov	r3, #0
 3923 08c0 4F304BE5 		strb	r3, [fp, #-79]
 209:../sudoku_2024.c **** 		Lcd_DspAscII8x16(colX, colY, BLACK, colValor);
 3924              		.loc 1 209 0 discriminator 2
 3925 08c4 B2125BE1 		ldrh	r1, [fp, #-34]
 3926 08c8 B4225BE1 		ldrh	r2, [fp, #-36]
 3927 08cc 50304BE2 		sub	r3, fp, #80
 3928 08d0 0100A0E1 		mov	r0, r1
 3929 08d4 0210A0E1 		mov	r1, r2
 3930 08d8 0F20A0E3 		mov	r2, #15
 3931 08dc FEFFFFEB 		bl	Lcd_DspAscII8x16
 3932              	.LBE13:
 204:../sudoku_2024.c **** 	for (j = 0; j < NUM_COLUMNAS - 7; j++) // Excluye las columnas extra
 3933              		.loc 1 204 0 discriminator 2
 3934 08e0 14301BE5 		ldr	r3, [fp, #-20]
 3935 08e4 013083E2 		add	r3, r3, #1
 3936 08e8 14300BE5 		str	r3, [fp, #-20]
 3937              	.L43:
 204:../sudoku_2024.c **** 	for (j = 0; j < NUM_COLUMNAS - 7; j++) // Excluye las columnas extra
 3938              		.loc 1 204 0 is_stmt 0 discriminator 1
 3939 08ec 14301BE5 		ldr	r3, [fp, #-20]
 3940 08f0 080053E3 		cmp	r3, #8
 3941 08f4 DCFFFFDA 		ble	.L44
 210:../sudoku_2024.c **** 	}
 211:../sudoku_2024.c **** 
 212:../sudoku_2024.c **** 	// Dibuja la cuadrícula
 213:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++) // Recorre las filas
 3942              		.loc 1 213 0 is_stmt 1
 3943 08f8 0030A0E3 		mov	r3, #0
 3944 08fc 10300BE5 		str	r3, [fp, #-16]
 3945 0900 070100EA 		b	.L45
 3946              	.L57:
 214:../sudoku_2024.c **** 	{
 215:../sudoku_2024.c **** 		for (j = 0; j < NUM_COLUMNAS - 7; j++) // Recorre las columnas
 3947              		.loc 1 215 0
 3948 0904 0030A0E3 		mov	r3, #0
 3949 0908 14300BE5 		str	r3, [fp, #-20]
 3950 090c FE0000EA 		b	.L46
 3951              	.L56:
 3952              	.LBB14:
 216:../sudoku_2024.c **** 		{
 217:../sudoku_2024.c **** 			INT16 usLeft = 35 + 30 * j; // Posición de la izquierda de cada celda
 3953              		.loc 1 217 0
 3954 0910 14301BE5 		ldr	r3, [fp, #-20]
 3955 0914 0338A0E1 		mov	r3, r3, asl #16
 3956 0918 2338A0E1 		mov	r3, r3, lsr #16
 3957 091c 0320A0E1 		mov	r2, r3	@ movhi
 3958 0920 0222A0E1 		mov	r2, r2, asl #4
 3959 0924 023063E0 		rsb	r3, r3, r2
 3960 0928 8330A0E1 		mov	r3, r3, asl #1
 3961 092c 0338A0E1 		mov	r3, r3, asl #16
 3962 0930 2338A0E1 		mov	r3, r3, lsr #16
 3963 0934 233083E2 		add	r3, r3, #35
 3964 0938 0338A0E1 		mov	r3, r3, asl #16
 3965 093c 2338A0E1 		mov	r3, r3, lsr #16
 3966 0940 B6324BE1 		strh	r3, [fp, #-38]	@ movhi
 218:../sudoku_2024.c **** 			INT16 usTop = 35 + 22 * i;	// Posición de la parte superior de cada celda
 3967              		.loc 1 218 0
 3968 0944 10301BE5 		ldr	r3, [fp, #-16]
 3969 0948 0338A0E1 		mov	r3, r3, asl #16
 3970 094c 2338A0E1 		mov	r3, r3, lsr #16
 3971 0950 0320A0E1 		mov	r2, r3	@ movhi
 3972 0954 0221A0E1 		mov	r2, r2, asl #2
 3973 0958 032082E0 		add	r2, r2, r3
 3974 095c 8220A0E1 		mov	r2, r2, asl #1
 3975 0960 033082E0 		add	r3, r2, r3
 3976 0964 8330A0E1 		mov	r3, r3, asl #1
 3977 0968 0338A0E1 		mov	r3, r3, asl #16
 3978 096c 2338A0E1 		mov	r3, r3, lsr #16
 3979 0970 233083E2 		add	r3, r3, #35
 3980 0974 0338A0E1 		mov	r3, r3, asl #16
 3981 0978 2338A0E1 		mov	r3, r3, lsr #16
 3982 097c B8324BE1 		strh	r3, [fp, #-40]	@ movhi
 219:../sudoku_2024.c **** 			INT16 usRight = usLeft + 29;
 3983              		.loc 1 219 0
 3984 0980 B6325BE1 		ldrh	r3, [fp, #-38]
 3985 0984 1D3083E2 		add	r3, r3, #29
 3986 0988 0338A0E1 		mov	r3, r3, asl #16
 3987 098c 2338A0E1 		mov	r3, r3, lsr #16
 3988 0990 BA324BE1 		strh	r3, [fp, #-42]	@ movhi
 220:../sudoku_2024.c **** 			INT16 usBottom = usTop + 21;
 3989              		.loc 1 220 0
 3990 0994 B8325BE1 		ldrh	r3, [fp, #-40]
 3991 0998 153083E2 		add	r3, r3, #21
 3992 099c 0338A0E1 		mov	r3, r3, asl #16
 3993 09a0 2338A0E1 		mov	r3, r3, lsr #16
 3994 09a4 BC324BE1 		strh	r3, [fp, #-44]	@ movhi
 221:../sudoku_2024.c **** 
 222:../sudoku_2024.c **** 			Lcd_Draw_Box(usLeft, usTop, usRight, usBottom, BLACK);
 3995              		.loc 1 222 0
 3996 09a8 F6025BE1 		ldrsh	r0, [fp, #-38]
 3997 09ac F8125BE1 		ldrsh	r1, [fp, #-40]
 3998 09b0 FA225BE1 		ldrsh	r2, [fp, #-42]
 3999 09b4 FC325BE1 		ldrsh	r3, [fp, #-44]
 4000 09b8 0FC0A0E3 		mov	ip, #15
 4001 09bc 00C08DE5 		str	ip, [sp, #0]
 4002 09c0 FEFFFFEB 		bl	Lcd_Draw_Box
 223:../sudoku_2024.c **** 
 224:../sudoku_2024.c **** 			uint8_t valor = celda_leer_valor(cuadricula[i][j]);
 4003              		.loc 1 224 0
 4004 09c4 10301BE5 		ldr	r3, [fp, #-16]
 4005 09c8 8332A0E1 		mov	r3, r3, asl #5
 4006 09cc 58201BE5 		ldr	r2, [fp, #-88]
 4007 09d0 032082E0 		add	r2, r2, r3
 4008 09d4 14301BE5 		ldr	r3, [fp, #-20]
 4009 09d8 8330A0E1 		mov	r3, r3, asl #1
 4010 09dc 033082E0 		add	r3, r2, r3
 4011 09e0 B030D3E1 		ldrh	r3, [r3, #0]
 4012 09e4 0300A0E1 		mov	r0, r3
 4013 09e8 FEFFFFEB 		bl	celda_leer_valor
 4014 09ec 0030A0E1 		mov	r3, r0
 4015 09f0 2D304BE5 		strb	r3, [fp, #-45]
 225:../sudoku_2024.c **** 			if (valor == 0)
 4016              		.loc 1 225 0
 4017 09f4 2D305BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 4018 09f8 000053E3 		cmp	r3, #0
 4019 09fc 7700001A 		bne	.L47
 226:../sudoku_2024.c **** 			{
 227:../sudoku_2024.c **** 				// Dibuja una sub-cuadrícula de 3x3 dentro de cada cuadro grande
 228:../sudoku_2024.c **** 				for (k = 0; k < 3; k++)
 4020              		.loc 1 228 0
 4021 0a00 0030A0E3 		mov	r3, #0
 4022 0a04 18300BE5 		str	r3, [fp, #-24]
 4023 0a08 700000EA 		b	.L48
 4024              	.L52:
 229:../sudoku_2024.c **** 				{
 230:../sudoku_2024.c **** 					for (l = 0; l < 3; l++)
 4025              		.loc 1 230 0
 4026 0a0c 0030A0E3 		mov	r3, #0
 4027 0a10 1C300BE5 		str	r3, [fp, #-28]
 4028 0a14 670000EA 		b	.L49
 4029              	.L51:
 4030              	.LBB15:
 231:../sudoku_2024.c **** 					{
 232:../sudoku_2024.c **** 						INT16 subLeft = usLeft + 9 * l;
 4031              		.loc 1 232 0
 4032 0a18 1C301BE5 		ldr	r3, [fp, #-28]
 4033 0a1c 0338A0E1 		mov	r3, r3, asl #16
 4034 0a20 2338A0E1 		mov	r3, r3, lsr #16
 4035 0a24 0320A0E1 		mov	r2, r3	@ movhi
 4036 0a28 8221A0E1 		mov	r2, r2, asl #3
 4037 0a2c 033082E0 		add	r3, r2, r3
 4038 0a30 0338A0E1 		mov	r3, r3, asl #16
 4039 0a34 2328A0E1 		mov	r2, r3, lsr #16
 4040 0a38 B6325BE1 		ldrh	r3, [fp, #-38]
 4041 0a3c 033082E0 		add	r3, r2, r3
 4042 0a40 0338A0E1 		mov	r3, r3, asl #16
 4043 0a44 2338A0E1 		mov	r3, r3, lsr #16
 4044 0a48 B0334BE1 		strh	r3, [fp, #-48]	@ movhi
 233:../sudoku_2024.c **** 						INT16 subTop = usTop + 7 * k;
 4045              		.loc 1 233 0
 4046 0a4c 18301BE5 		ldr	r3, [fp, #-24]
 4047 0a50 0338A0E1 		mov	r3, r3, asl #16
 4048 0a54 2338A0E1 		mov	r3, r3, lsr #16
 4049 0a58 0320A0E1 		mov	r2, r3	@ movhi
 4050 0a5c 8221A0E1 		mov	r2, r2, asl #3
 4051 0a60 023063E0 		rsb	r3, r3, r2
 4052 0a64 0338A0E1 		mov	r3, r3, asl #16
 4053 0a68 2328A0E1 		mov	r2, r3, lsr #16
 4054 0a6c B8325BE1 		ldrh	r3, [fp, #-40]
 4055 0a70 033082E0 		add	r3, r2, r3
 4056 0a74 0338A0E1 		mov	r3, r3, asl #16
 4057 0a78 2338A0E1 		mov	r3, r3, lsr #16
 4058 0a7c B2334BE1 		strh	r3, [fp, #-50]	@ movhi
 234:../sudoku_2024.c **** 						INT16 subRight = subLeft + 8;
 4059              		.loc 1 234 0
 4060 0a80 B0335BE1 		ldrh	r3, [fp, #-48]
 4061 0a84 083083E2 		add	r3, r3, #8
 4062 0a88 0338A0E1 		mov	r3, r3, asl #16
 4063 0a8c 2338A0E1 		mov	r3, r3, lsr #16
 4064 0a90 B4334BE1 		strh	r3, [fp, #-52]	@ movhi
 235:../sudoku_2024.c **** 						INT16 subBottom = subTop + 6;
 4065              		.loc 1 235 0
 4066 0a94 B2335BE1 		ldrh	r3, [fp, #-50]
 4067 0a98 063083E2 		add	r3, r3, #6
 4068 0a9c 0338A0E1 		mov	r3, r3, asl #16
 4069 0aa0 2338A0E1 		mov	r3, r3, lsr #16
 4070 0aa4 B6334BE1 		strh	r3, [fp, #-54]	@ movhi
 236:../sudoku_2024.c **** 
 237:../sudoku_2024.c **** 						int displace = 4 + (k * 3) + l;
 4071              		.loc 1 237 0
 4072 0aa8 18201BE5 		ldr	r2, [fp, #-24]
 4073 0aac 0230A0E1 		mov	r3, r2
 4074 0ab0 8330A0E1 		mov	r3, r3, asl #1
 4075 0ab4 023083E0 		add	r3, r3, r2
 4076 0ab8 042083E2 		add	r2, r3, #4
 4077 0abc 1C301BE5 		ldr	r3, [fp, #-28]
 4078 0ac0 033082E0 		add	r3, r2, r3
 4079 0ac4 3C300BE5 		str	r3, [fp, #-60]
 238:../sudoku_2024.c **** 
 239:../sudoku_2024.c **** 						uint16_t candidato = (cuadricula[i][j] >> displace) & 1;
 4080              		.loc 1 239 0
 4081 0ac8 10301BE5 		ldr	r3, [fp, #-16]
 4082 0acc 8332A0E1 		mov	r3, r3, asl #5
 4083 0ad0 58201BE5 		ldr	r2, [fp, #-88]
 4084 0ad4 032082E0 		add	r2, r2, r3
 4085 0ad8 14301BE5 		ldr	r3, [fp, #-20]
 4086 0adc 8330A0E1 		mov	r3, r3, asl #1
 4087 0ae0 033082E0 		add	r3, r2, r3
 4088 0ae4 B030D3E1 		ldrh	r3, [r3, #0]
 4089 0ae8 0320A0E1 		mov	r2, r3
 4090 0aec 3C301BE5 		ldr	r3, [fp, #-60]
 4091 0af0 5233A0E1 		mov	r3, r2, asr r3
 4092 0af4 0338A0E1 		mov	r3, r3, asl #16
 4093 0af8 2338A0E1 		mov	r3, r3, lsr #16
 4094 0afc 013003E2 		and	r3, r3, #1
 4095 0b00 BE334BE1 		strh	r3, [fp, #-62]	@ movhi
 240:../sudoku_2024.c **** 
 241:../sudoku_2024.c **** 						if (candidato == 1)
 4096              		.loc 1 241 0
 4097 0b04 BE335BE1 		ldrh	r3, [fp, #-62]
 4098 0b08 010053E3 		cmp	r3, #1
 4099 0b0c 2600001A 		bne	.L50
 4100              	.LBB16:
 242:../sudoku_2024.c **** 						{
 243:../sudoku_2024.c **** 							INT16 centerX = subLeft + (subRight - subLeft) / 2 - 2;
 4101              		.loc 1 243 0
 4102 0b10 F4235BE1 		ldrsh	r2, [fp, #-52]
 4103 0b14 F0335BE1 		ldrsh	r3, [fp, #-48]
 4104 0b18 023063E0 		rsb	r3, r3, r2
 4105 0b1c A32FA0E1 		mov	r2, r3, lsr #31
 4106 0b20 033082E0 		add	r3, r2, r3
 4107 0b24 C330A0E1 		mov	r3, r3, asr #1
 4108 0b28 0338A0E1 		mov	r3, r3, asl #16
 4109 0b2c 2328A0E1 		mov	r2, r3, lsr #16
 4110 0b30 B0335BE1 		ldrh	r3, [fp, #-48]
 4111 0b34 033082E0 		add	r3, r2, r3
 4112 0b38 0338A0E1 		mov	r3, r3, asl #16
 4113 0b3c 2338A0E1 		mov	r3, r3, lsr #16
 4114 0b40 023043E2 		sub	r3, r3, #2
 4115 0b44 0338A0E1 		mov	r3, r3, asl #16
 4116 0b48 2338A0E1 		mov	r3, r3, lsr #16
 4117 0b4c B0344BE1 		strh	r3, [fp, #-64]	@ movhi
 244:../sudoku_2024.c **** 							INT16 centerY = subTop + (subBottom - subTop) / 2 - 7;
 4118              		.loc 1 244 0
 4119 0b50 F6235BE1 		ldrsh	r2, [fp, #-54]
 4120 0b54 F2335BE1 		ldrsh	r3, [fp, #-50]
 4121 0b58 023063E0 		rsb	r3, r3, r2
 4122 0b5c A32FA0E1 		mov	r2, r3, lsr #31
 4123 0b60 033082E0 		add	r3, r2, r3
 4124 0b64 C330A0E1 		mov	r3, r3, asr #1
 4125 0b68 0338A0E1 		mov	r3, r3, asl #16
 4126 0b6c 2328A0E1 		mov	r2, r3, lsr #16
 4127 0b70 B2335BE1 		ldrh	r3, [fp, #-50]
 4128 0b74 033082E0 		add	r3, r2, r3
 4129 0b78 0338A0E1 		mov	r3, r3, asl #16
 4130 0b7c 2338A0E1 		mov	r3, r3, lsr #16
 4131 0b80 073043E2 		sub	r3, r3, #7
 4132 0b84 0338A0E1 		mov	r3, r3, asl #16
 4133 0b88 2338A0E1 		mov	r3, r3, lsr #16
 4134 0b8c B2344BE1 		strh	r3, [fp, #-66]	@ movhi
 245:../sudoku_2024.c **** 							Lcd_DspAscII8x16(centerX, centerY, BLACK, "x");
 4135              		.loc 1 245 0
 4136 0b90 B0245BE1 		ldrh	r2, [fp, #-64]
 4137 0b94 B2345BE1 		ldrh	r3, [fp, #-66]
 4138 0b98 0200A0E1 		mov	r0, r2
 4139 0b9c 0310A0E1 		mov	r1, r3
 4140 0ba0 0F20A0E3 		mov	r2, #15
 4141 0ba4 BC319FE5 		ldr	r3, .L58+4
 4142 0ba8 FEFFFFEB 		bl	Lcd_DspAscII8x16
 4143              	.L50:
 4144              	.LBE16:
 4145              	.LBE15:
 230:../sudoku_2024.c **** 					for (l = 0; l < 3; l++)
 4146              		.loc 1 230 0
 4147 0bac 1C301BE5 		ldr	r3, [fp, #-28]
 4148 0bb0 013083E2 		add	r3, r3, #1
 4149 0bb4 1C300BE5 		str	r3, [fp, #-28]
 4150              	.L49:
 230:../sudoku_2024.c **** 					for (l = 0; l < 3; l++)
 4151              		.loc 1 230 0 is_stmt 0 discriminator 1
 4152 0bb8 1C301BE5 		ldr	r3, [fp, #-28]
 4153 0bbc 020053E3 		cmp	r3, #2
 4154 0bc0 94FFFFDA 		ble	.L51
 228:../sudoku_2024.c **** 				for (k = 0; k < 3; k++)
 4155              		.loc 1 228 0 is_stmt 1
 4156 0bc4 18301BE5 		ldr	r3, [fp, #-24]
 4157 0bc8 013083E2 		add	r3, r3, #1
 4158 0bcc 18300BE5 		str	r3, [fp, #-24]
 4159              	.L48:
 228:../sudoku_2024.c **** 				for (k = 0; k < 3; k++)
 4160              		.loc 1 228 0 is_stmt 0 discriminator 1
 4161 0bd0 18301BE5 		ldr	r3, [fp, #-24]
 4162 0bd4 020053E3 		cmp	r3, #2
 4163 0bd8 8BFFFFDA 		ble	.L52
 228:../sudoku_2024.c **** 				for (k = 0; k < 3; k++)
 4164              		.loc 1 228 0
 4165 0bdc 470000EA 		b	.L53
 4166              	.L47:
 4167              	.LBB17:
 246:../sudoku_2024.c **** 						}
 247:../sudoku_2024.c **** 					}
 248:../sudoku_2024.c **** 				}
 249:../sudoku_2024.c **** 			}
 250:../sudoku_2024.c **** 			else
 251:../sudoku_2024.c **** 			{
 252:../sudoku_2024.c **** 				INT16 centerX = usLeft + 10;
 4168              		.loc 1 252 0 is_stmt 1
 4169 0be0 B6325BE1 		ldrh	r3, [fp, #-38]
 4170 0be4 0A3083E2 		add	r3, r3, #10
 4171 0be8 0338A0E1 		mov	r3, r3, asl #16
 4172 0bec 2338A0E1 		mov	r3, r3, lsr #16
 4173 0bf0 B4344BE1 		strh	r3, [fp, #-68]	@ movhi
 253:../sudoku_2024.c **** 				INT16 centerY = usTop + 4;
 4174              		.loc 1 253 0
 4175 0bf4 B8325BE1 		ldrh	r3, [fp, #-40]
 4176 0bf8 043083E2 		add	r3, r3, #4
 4177 0bfc 0338A0E1 		mov	r3, r3, asl #16
 4178 0c00 2338A0E1 		mov	r3, r3, lsr #16
 4179 0c04 B6344BE1 		strh	r3, [fp, #-70]	@ movhi
 254:../sudoku_2024.c **** 
 255:../sudoku_2024.c **** 				if (cuadricula[i][j] & 0x8000)
 4180              		.loc 1 255 0
 4181 0c08 10301BE5 		ldr	r3, [fp, #-16]
 4182 0c0c 8332A0E1 		mov	r3, r3, asl #5
 4183 0c10 58201BE5 		ldr	r2, [fp, #-88]
 4184 0c14 032082E0 		add	r2, r2, r3
 4185 0c18 14301BE5 		ldr	r3, [fp, #-20]
 4186 0c1c 8330A0E1 		mov	r3, r3, asl #1
 4187 0c20 033082E0 		add	r3, r2, r3
 4188 0c24 B030D3E1 		ldrh	r3, [r3, #0]
 4189 0c28 0338A0E1 		mov	r3, r3, asl #16
 4190 0c2c 2338A0E1 		mov	r3, r3, lsr #16
 4191 0c30 0338A0E1 		mov	r3, r3, asl #16
 4192 0c34 4338A0E1 		mov	r3, r3, asr #16
 4193 0c38 000053E3 		cmp	r3, #0
 4194 0c3c 060000AA 		bge	.L54
 256:../sudoku_2024.c **** 				{
 257:../sudoku_2024.c **** 					LcdClrRect(usLeft, usTop, usRight, usBottom, LIGHTGRAY);
 4195              		.loc 1 257 0
 4196 0c40 F6025BE1 		ldrsh	r0, [fp, #-38]
 4197 0c44 F8125BE1 		ldrsh	r1, [fp, #-40]
 4198 0c48 FA225BE1 		ldrsh	r2, [fp, #-42]
 4199 0c4c FC325BE1 		ldrsh	r3, [fp, #-44]
 4200 0c50 05C0A0E3 		mov	ip, #5
 4201 0c54 00C08DE5 		str	ip, [sp, #0]
 4202 0c58 FEFFFFEB 		bl	LcdClrRect
 4203              	.L54:
 258:../sudoku_2024.c **** 				}
 259:../sudoku_2024.c **** 
 260:../sudoku_2024.c **** 				if (cuadricula[i][j] & 0x4000)
 4204              		.loc 1 260 0
 4205 0c5c 10301BE5 		ldr	r3, [fp, #-16]
 4206 0c60 8332A0E1 		mov	r3, r3, asl #5
 4207 0c64 58201BE5 		ldr	r2, [fp, #-88]
 4208 0c68 032082E0 		add	r2, r2, r3
 4209 0c6c 14301BE5 		ldr	r3, [fp, #-20]
 4210 0c70 8330A0E1 		mov	r3, r3, asl #1
 4211 0c74 033082E0 		add	r3, r2, r3
 4212 0c78 B030D3E1 		ldrh	r3, [r3, #0]
 4213 0c7c 013903E2 		and	r3, r3, #16384
 4214 0c80 000053E3 		cmp	r3, #0
 4215 0c84 1000000A 		beq	.L55
 4216              	.LBB18:
 261:../sudoku_2024.c **** 				{
 262:../sudoku_2024.c **** 					INT16 errorX = usRight - 8;
 4217              		.loc 1 262 0
 4218 0c88 BA325BE1 		ldrh	r3, [fp, #-42]
 4219 0c8c 083043E2 		sub	r3, r3, #8
 4220 0c90 0338A0E1 		mov	r3, r3, asl #16
 4221 0c94 2338A0E1 		mov	r3, r3, lsr #16
 4222 0c98 B8344BE1 		strh	r3, [fp, #-72]	@ movhi
 263:../sudoku_2024.c **** 					INT16 errorY = usTop + 2;
 4223              		.loc 1 263 0
 4224 0c9c B8325BE1 		ldrh	r3, [fp, #-40]
 4225 0ca0 023083E2 		add	r3, r3, #2
 4226 0ca4 0338A0E1 		mov	r3, r3, asl #16
 4227 0ca8 2338A0E1 		mov	r3, r3, lsr #16
 4228 0cac BA344BE1 		strh	r3, [fp, #-74]	@ movhi
 264:../sudoku_2024.c **** 					Lcd_DspAscII8x16(errorX, errorY, BLACK, "e");
 4229              		.loc 1 264 0
 4230 0cb0 B8245BE1 		ldrh	r2, [fp, #-72]
 4231 0cb4 BA345BE1 		ldrh	r3, [fp, #-74]
 4232 0cb8 0200A0E1 		mov	r0, r2
 4233 0cbc 0310A0E1 		mov	r1, r3
 4234 0cc0 0F20A0E3 		mov	r2, #15
 4235 0cc4 A0309FE5 		ldr	r3, .L58+8
 4236 0cc8 FEFFFFEB 		bl	Lcd_DspAscII8x16
 4237              	.L55:
 4238              	.LBE18:
 265:../sudoku_2024.c **** 				}
 266:../sudoku_2024.c **** 
 267:../sudoku_2024.c **** 				char string_value[2] = {valor + '0', '\0'};
 4239              		.loc 1 267 0
 4240 0ccc 2D305BE5 		ldrb	r3, [fp, #-45]
 4241 0cd0 303083E2 		add	r3, r3, #48
 4242 0cd4 FF3003E2 		and	r3, r3, #255
 4243 0cd8 54304BE5 		strb	r3, [fp, #-84]
 4244 0cdc 0030A0E3 		mov	r3, #0
 4245 0ce0 53304BE5 		strb	r3, [fp, #-83]
 268:../sudoku_2024.c **** 				Lcd_DspAscII8x16(centerX, centerY, BLACK, string_value);
 4246              		.loc 1 268 0
 4247 0ce4 B4145BE1 		ldrh	r1, [fp, #-68]
 4248 0ce8 B6245BE1 		ldrh	r2, [fp, #-70]
 4249 0cec 54304BE2 		sub	r3, fp, #84
 4250 0cf0 0100A0E1 		mov	r0, r1
 4251 0cf4 0210A0E1 		mov	r1, r2
 4252 0cf8 0F20A0E3 		mov	r2, #15
 4253 0cfc FEFFFFEB 		bl	Lcd_DspAscII8x16
 4254              	.L53:
 4255              	.LBE17:
 4256              	.LBE14:
 215:../sudoku_2024.c **** 		for (j = 0; j < NUM_COLUMNAS - 7; j++) // Recorre las columnas
 4257              		.loc 1 215 0
 4258 0d00 14301BE5 		ldr	r3, [fp, #-20]
 4259 0d04 013083E2 		add	r3, r3, #1
 4260 0d08 14300BE5 		str	r3, [fp, #-20]
 4261              	.L46:
 215:../sudoku_2024.c **** 		for (j = 0; j < NUM_COLUMNAS - 7; j++) // Recorre las columnas
 4262              		.loc 1 215 0 is_stmt 0 discriminator 1
 4263 0d0c 14301BE5 		ldr	r3, [fp, #-20]
 4264 0d10 080053E3 		cmp	r3, #8
 4265 0d14 FDFEFFDA 		ble	.L56
 213:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++) // Recorre las filas
 4266              		.loc 1 213 0 is_stmt 1
 4267 0d18 10301BE5 		ldr	r3, [fp, #-16]
 4268 0d1c 013083E2 		add	r3, r3, #1
 4269 0d20 10300BE5 		str	r3, [fp, #-16]
 4270              	.L45:
 213:../sudoku_2024.c **** 	for (i = 0; i < NUM_FILAS; i++) // Recorre las filas
 4271              		.loc 1 213 0 is_stmt 0 discriminator 1
 4272 0d24 10301BE5 		ldr	r3, [fp, #-16]
 4273 0d28 080053E3 		cmp	r3, #8
 4274 0d2c F4FEFFDA 		ble	.L57
 269:../sudoku_2024.c **** 			}
 270:../sudoku_2024.c **** 		}
 271:../sudoku_2024.c **** 	}
 272:../sudoku_2024.c **** 
 273:../sudoku_2024.c **** 	BitmapView(125, 135, Stru_Bitmap_gbMouse);
 4275              		.loc 1 273 0 is_stmt 1
 4276 0d30 38309FE5 		ldr	r3, .L58+12
 4277 0d34 0D20A0E1 		mov	r2, sp
 4278 0d38 081083E2 		add	r1, r3, #8
 4279 0d3c 030091E8 		ldmia	r1, {r0, r1}
 4280 0d40 030082E8 		stmia	r2, {r0, r1}
 4281 0d44 0C0093E8 		ldmia	r3, {r2, r3}
 4282 0d48 7D00A0E3 		mov	r0, #125
 4283 0d4c 8710A0E3 		mov	r1, #135
 4284 0d50 FEFFFFEB 		bl	BitmapView
 274:../sudoku_2024.c **** 	Lcd_Dma_Trans();
 4285              		.loc 1 274 0
 4286 0d54 FEFFFFEB 		bl	Lcd_Dma_Trans
 275:../sudoku_2024.c **** }
 4287              		.loc 1 275 0
 4288 0d58 0CD04BE2 		sub	sp, fp, #12
 4289 0d5c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4290 0d60 1EFF2FE1 		bx	lr
 4291              	.L59:
 4292              		.align	2
 4293              	.L58:
 4294 0d64 00000000 		.word	.LC0
 4295 0d68 0C000000 		.word	.LC1
 4296 0d6c 10000000 		.word	.LC2
 4297 0d70 00000000 		.word	Stru_Bitmap_gbMouse
 4298              		.cfi_endproc
 4299              	.LFE5:
 4301              		.align	2
 4303              	verificar_lista_calculada:
 4304              	.LFB6:
 276:../sudoku_2024.c **** 
 277:../sudoku_2024.c **** // extern void LCD_mostrar_sudoku(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 278:../sudoku_2024.c **** // {
 279:../sudoku_2024.c **** // 	Lcd_Clr();
 280:../sudoku_2024.c **** // 	Lcd_Active_Clr();
 281:../sudoku_2024.c **** 
 282:../sudoku_2024.c **** // 	int i, j, k, l;
 283:../sudoku_2024.c **** 
 284:../sudoku_2024.c **** // 	for (i = 0; i < NUM_FILAS; i++) // Numeración de filas
 285:../sudoku_2024.c **** // 	{
 286:../sudoku_2024.c **** // 		INT16 filaX = 28;					 // Posición fija de la numeración de filas
 287:../sudoku_2024.c **** // 		INT16 filaY = 28 + 22 * i; // La posición de la fila se ajusta a la cuadrícula
 288:../sudoku_2024.c **** // 		char filaValor[2] = {i + '1', '\0'};
 289:../sudoku_2024.c **** // 		Lcd_DspAscII8x16(filaX, filaY, BLACK, filaValor);
 290:../sudoku_2024.c **** // 	}
 291:../sudoku_2024.c **** 
 292:../sudoku_2024.c **** // 	for (j = 0; j < NUM_COLUMNAS - 7; j++) // Numeración de columnas
 293:../sudoku_2024.c **** // 	{
 294:../sudoku_2024.c **** // 		INT16 colX = 35 + 30 * j; // Posición de la numeración de columnas
 295:../sudoku_2024.c **** // 		INT16 colY = 28;					// Fija la posición de la numeración en la parte superior
 296:../sudoku_2024.c **** // 		char colValor[2] = {j + '1', '\0'};
 297:../sudoku_2024.c **** // 		Lcd_DspAscII8x16(colX, colY, BLACK, colValor);
 298:../sudoku_2024.c **** // 	}
 299:../sudoku_2024.c **** 
 300:../sudoku_2024.c **** // 	for (i = 0; i < NUM_FILAS; i++) // Recorre las filas
 301:../sudoku_2024.c **** // 	{
 302:../sudoku_2024.c **** // 		for (j = 0; j < NUM_COLUMNAS - 7; j++) // Recorre las columnas
 303:../sudoku_2024.c **** // 		{
 304:../sudoku_2024.c **** // 			INT16 usLeft = 35 + 30 * j; // Cambié el índice de 'i' a 'j'
 305:../sudoku_2024.c **** // 			INT16 usTop = 35 + 22 * i;	// Cambié el índice de 'j' a 'i'
 306:../sudoku_2024.c **** // 			INT16 usRight = usLeft + 29;
 307:../sudoku_2024.c **** // 			INT16 usBottom = usTop + 21;
 308:../sudoku_2024.c **** 
 309:../sudoku_2024.c **** // 			Lcd_Draw_Box(usLeft, usTop, usRight, usBottom, BLACK);
 310:../sudoku_2024.c **** 
 311:../sudoku_2024.c **** // 			uint8_t valor = celda_leer_valor(cuadricula[i][j]);
 312:../sudoku_2024.c **** // 			if (valor == 0)
 313:../sudoku_2024.c **** // 			{
 314:../sudoku_2024.c **** // 				// Dibuja una sub-cuadrícula de 3x3 dentro de cada cuadro grande
 315:../sudoku_2024.c **** // 				for (k = 0; k < 3; k++)
 316:../sudoku_2024.c **** // 				{
 317:../sudoku_2024.c **** // 					for (l = 0; l < 3; l++)
 318:../sudoku_2024.c **** // 					{
 319:../sudoku_2024.c **** // 						INT16 subLeft = usLeft + 9 * l;
 320:../sudoku_2024.c **** // 						INT16 subTop = usTop + 7 * k;
 321:../sudoku_2024.c **** // 						INT16 subRight = subLeft + 8;
 322:../sudoku_2024.c **** // 						INT16 subBottom = subTop + 6;
 323:../sudoku_2024.c **** 
 324:../sudoku_2024.c **** // 						int displace = 4 + (k * 3) + l;
 325:../sudoku_2024.c **** 
 326:../sudoku_2024.c **** // 						uint16_t candidato = (cuadricula[i][j] >> displace) & 1;
 327:../sudoku_2024.c **** 
 328:../sudoku_2024.c **** // 						if (candidato == 1)
 329:../sudoku_2024.c **** // 						{
 330:../sudoku_2024.c **** // 							INT16 centerX = subLeft + (subRight - subLeft) / 2 - 2;
 331:../sudoku_2024.c **** // 							INT16 centerY = subTop + (subBottom - subTop) / 2 - 7;
 332:../sudoku_2024.c **** // 							Lcd_DspAscII8x16(centerX, centerY, BLACK, "x");
 333:../sudoku_2024.c **** // 						}
 334:../sudoku_2024.c **** // 					}
 335:../sudoku_2024.c **** // 				}
 336:../sudoku_2024.c **** // 			}
 337:../sudoku_2024.c **** // 			else
 338:../sudoku_2024.c **** // 			{
 339:../sudoku_2024.c **** // 				INT16 centerX = usLeft + 10;
 340:../sudoku_2024.c **** // 				INT16 centerY = usTop + 4;
 341:../sudoku_2024.c **** 
 342:../sudoku_2024.c **** // 				// if (cuadricula[i][j] & 0x4000)
 343:../sudoku_2024.c **** // 				// {
 344:../sudoku_2024.c **** // 				// 	Lcd_DspAscII8x16(centerX, centerY, BLACK, "E");
 345:../sudoku_2024.c **** // 				// }
 346:../sudoku_2024.c **** // 				// else
 347:../sudoku_2024.c **** // 				// {
 348:../sudoku_2024.c **** // 				char string_value[2] = {valor + '0', '\0'};
 349:../sudoku_2024.c **** // 				Lcd_DspAscII8x16(centerX, centerY, BLACK, string_value);
 350:../sudoku_2024.c **** // 				// }
 351:../sudoku_2024.c **** // 			}
 352:../sudoku_2024.c **** // 		}
 353:../sudoku_2024.c **** // 	}
 354:../sudoku_2024.c **** 
 355:../sudoku_2024.c **** // 	BitmapView(125, 135, Stru_Bitmap_gbMouse);
 356:../sudoku_2024.c **** // 	Lcd_Dma_Trans();
 357:../sudoku_2024.c **** // }
 358:../sudoku_2024.c **** 
 359:../sudoku_2024.c **** /* Recorre la cuadricula y para cada celda llama a cuadricula_candidatos_verificar */
 360:../sudoku_2024.c **** static int
 361:../sudoku_2024.c **** verificar_lista_calculada(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS])
 362:../sudoku_2024.c **** {
 4305              		.loc 1 362 0
 4306              		.cfi_startproc
 4307              		@ Function supports interworking.
 4308              		@ args = 0, pretend = 0, frame = 16
 4309              		@ frame_needed = 1, uses_anonymous_args = 0
 4310 0d74 0DC0A0E1 		mov	ip, sp
 4311              	.LCFI12:
 4312              		.cfi_def_cfa_register 12
 4313 0d78 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4314 0d7c 04B04CE2 		sub	fp, ip, #4
 4315              		.cfi_offset 14, -8
 4316              		.cfi_offset 13, -12
 4317              		.cfi_offset 11, -16
 4318              	.LCFI13:
 4319              		.cfi_def_cfa 11, 4
 4320 0d80 10D04DE2 		sub	sp, sp, #16
 4321 0d84 18000BE5 		str	r0, [fp, #-24]
 363:../sudoku_2024.c **** 	int row = 0;
 4322              		.loc 1 363 0
 4323 0d88 0030A0E3 		mov	r3, #0
 4324 0d8c 10300BE5 		str	r3, [fp, #-16]
 364:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 4325              		.loc 1 364 0
 4326 0d90 0F0000EA 		b	.L61
 4327              	.L64:
 4328              	.LBB19:
 365:../sudoku_2024.c **** 	{
 366:../sudoku_2024.c **** 		int col = 0;
 4329              		.loc 1 366 0
 4330 0d94 0030A0E3 		mov	r3, #0
 4331 0d98 14300BE5 		str	r3, [fp, #-20]
 367:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 4332              		.loc 1 367 0
 4333 0d9c 060000EA 		b	.L62
 4334              	.L63:
 368:../sudoku_2024.c **** 		{
 369:../sudoku_2024.c **** 			cuadricula_candidatos_verificar(cuadricula, row, col);
 4335              		.loc 1 369 0
 4336 0da0 18001BE5 		ldr	r0, [fp, #-24]
 4337 0da4 10101BE5 		ldr	r1, [fp, #-16]
 4338 0da8 14201BE5 		ldr	r2, [fp, #-20]
 4339 0dac FEFFFFEB 		bl	cuadricula_candidatos_verificar
 370:../sudoku_2024.c **** 			col++;
 4340              		.loc 1 370 0
 4341 0db0 14301BE5 		ldr	r3, [fp, #-20]
 4342 0db4 013083E2 		add	r3, r3, #1
 4343 0db8 14300BE5 		str	r3, [fp, #-20]
 4344              	.L62:
 367:../sudoku_2024.c **** 		while (col < NUM_COLUMNAS - 7)
 4345              		.loc 1 367 0 discriminator 1
 4346 0dbc 14301BE5 		ldr	r3, [fp, #-20]
 4347 0dc0 080053E3 		cmp	r3, #8
 4348 0dc4 F5FFFFDA 		ble	.L63
 371:../sudoku_2024.c **** 		}
 372:../sudoku_2024.c **** 		row++;
 4349              		.loc 1 372 0
 4350 0dc8 10301BE5 		ldr	r3, [fp, #-16]
 4351 0dcc 013083E2 		add	r3, r3, #1
 4352 0dd0 10300BE5 		str	r3, [fp, #-16]
 4353              	.L61:
 4354              	.LBE19:
 364:../sudoku_2024.c **** 	while (row < NUM_FILAS)
 4355              		.loc 1 364 0 discriminator 1
 4356 0dd4 10301BE5 		ldr	r3, [fp, #-16]
 4357 0dd8 080053E3 		cmp	r3, #8
 4358 0ddc ECFFFFDA 		ble	.L64
 373:../sudoku_2024.c **** 	}
 374:../sudoku_2024.c **** 	return errors;
 4359              		.loc 1 374 0
 4360 0de0 10309FE5 		ldr	r3, .L65
 4361 0de4 003093E5 		ldr	r3, [r3, #0]
 375:../sudoku_2024.c **** }
 4362              		.loc 1 375 0
 4363 0de8 0300A0E1 		mov	r0, r3
 4364 0dec 0CD04BE2 		sub	sp, fp, #12
 4365 0df0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4366 0df4 1EFF2FE1 		bx	lr
 4367              	.L66:
 4368              		.align	2
 4369              	.L65:
 4370 0df8 00000000 		.word	errors
 4371              		.cfi_endproc
 4372              	.LFE6:
 4374              		.align	2
 4375              		.global	sudoku9x9
 4377              	sudoku9x9:
 4378              	.LFB7:
 376:../sudoku_2024.c **** 
 377:../sudoku_2024.c **** /* *****************************************************************************
 378:../sudoku_2024.c ****  * Funciones publicas
 379:../sudoku_2024.c ****  * (pueden ser invocadas desde otro fichero) */
 380:../sudoku_2024.c **** 
 381:../sudoku_2024.c **** /* *******************************************cuadricula[NUM_FILAS][NUM_COLUMNAS]******************
 382:../sudoku_2024.c ****  * programa principal del juego que recibe el tablero,
 383:../sudoku_2024.c ****  * y la senyal de ready que indica que se han actualizado fila y columna */
 384:../sudoku_2024.c **** void sudoku9x9(CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS], char *ready)
 385:../sudoku_2024.c **** {
 4379              		.loc 1 385 0
 4380              		.cfi_startproc
 4381              		@ Function supports interworking.
 4382              		@ args = 0, pretend = 0, frame = 8
 4383              		@ frame_needed = 1, uses_anonymous_args = 0
 4384 0dfc 0DC0A0E1 		mov	ip, sp
 4385              	.LCFI14:
 4386              		.cfi_def_cfa_register 12
 4387 0e00 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4388 0e04 04B04CE2 		sub	fp, ip, #4
 4389              		.cfi_offset 14, -8
 4390              		.cfi_offset 13, -12
 4391              		.cfi_offset 11, -16
 4392              	.LCFI15:
 4393              		.cfi_def_cfa 11, 4
 4394 0e08 08D04DE2 		sub	sp, sp, #8
 4395 0e0c 10000BE5 		str	r0, [fp, #-16]
 4396 0e10 14100BE5 		str	r1, [fp, #-20]
 386:../sudoku_2024.c **** 
 387:../sudoku_2024.c **** 	// Dos configuraciones para *init*
 388:../sudoku_2024.c **** 
 389:../sudoku_2024.c **** 	celdas_vacias = sudoku_candidatos_init_c(cuadricula, 0); // Version C + C
 4397              		.loc 1 389 0
 4398 0e14 10001BE5 		ldr	r0, [fp, #-16]
 4399 0e18 0010A0E3 		mov	r1, #0
 4400 0e1c FEFFFFEB 		bl	sudoku_candidatos_init_c
 4401 0e20 0020A0E1 		mov	r2, r0
 4402 0e24 0C309FE5 		ldr	r3, .L68
 4403 0e28 002083E5 		str	r2, [r3, #0]
 390:../sudoku_2024.c **** 
 391:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 392:../sudoku_2024.c **** 
 393:../sudoku_2024.c **** 	// celdas_vacias = sudoku_candidatos_init_c(cuadricula, 1); // Version C + ARM
 394:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 395:../sudoku_2024.c **** 
 396:../sudoku_2024.c **** 	// celdas_vacias = sudoku_candidatos_init_c(cuadricula, 2); // Version C + Thumb
 397:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 398:../sudoku_2024.c **** 
 399:../sudoku_2024.c **** 	// celdas_vacias = sudoku_candidatos_init_arm(cuadricula, 0); // Version ARM + C
 400:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 401:../sudoku_2024.c **** 
 402:../sudoku_2024.c **** 	// celdas_vacias = sudoku_candidatos_init_arm(cuadricula, 1); // Version ARM + ARM
 403:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 404:../sudoku_2024.c **** 
 405:../sudoku_2024.c **** 	// celdas_vacias = sudoku_candidatos_init_arm(cuadricula, 2); // Version ARM + Thumb
 406:../sudoku_2024.c **** 	// verificar_lista_calculada(cuadricula);
 407:../sudoku_2024.c **** }
 4404              		.loc 1 407 0
 4405 0e2c 0CD04BE2 		sub	sp, fp, #12
 4406 0e30 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4407 0e34 1EFF2FE1 		bx	lr
 4408              	.L69:
 4409              		.align	2
 4410              	.L68:
 4411 0e38 00000000 		.word	celdas_vacias
 4412              		.cfi_endproc
 4413              	.LFE7:
 4415              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sudoku_2024.c
                            *COM*:00000004 ready
                            *COM*:00000004 celdas_vacias
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3071   .bss:00000000 sudoku_status
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3072   .bss:00000000 $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3077   .bss:00000004 errors
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3080   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3083   .text:00000000 celda_poner_valor
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3135   .text:00000078 celda_leer_valor
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3171   .text:000000b0 sudoku_candidatos_propagar_c
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3448   .text:000003cc $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3452   .text:000003d0 $a
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3455   .text:000003d0 sudoku_candidatos_init_c
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3643   .text:000005ac cuadricula_candidatos_verificar
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3795   .text:0000078c $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3800   .rodata:00000000 $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3810   .text:00000790 $a
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:3813   .text:00000790 LCD_mostrar_sudoku
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4294   .text:00000d64 $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4301   .text:00000d74 $a
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4303   .text:00000d74 verificar_lista_calculada
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4370   .text:00000df8 $d
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4374   .text:00000dfc $a
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4377   .text:00000dfc sudoku9x9
C:\Users\Jorge\AppData\Local\Temp\cc6yzhYi.s:4411   .text:00000e38 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sudoku_candidatos_propagar_arm
Lcd_Clr
Lcd_Active_Clr
Lcd_DspAscII8x16
Lcd_Draw_Box
LcdClrRect
BitmapView
Lcd_Dma_Trans
Stru_Bitmap_gbMouse
