   1              	# 1 "../common/44binit.asm"
   1              	# *******************************************************
   0              	
   0              	
   0              	
   2              	# * NAME    : 44BINIT.S					*
   3              	# * Version : 10.April.2000				*
   4              	# * Description:					*
   5              	# *	C start up codes				*
   6              	# *	Configure memory, Initialize ISR ,stacks	*
   7              	# *	Initialize C-variables				*
   8              	# *	Fill zeros into zero-initialized C-variables	*
   9              	# *******************************************************
  10              	
  11              	    .include "option.a"
   1              	/*********************************************************************************************
   2              	* File: 	option.a
   3              	* Author:	embest	
   4              	* Desc: 	S3CEV40 option parameter
   5              	* History:	
   6              	*********************************************************************************************/
   7              	
   8              	#**********OPTIONS*******************************
   9              	.equ 	_ISR_STARTADDRESS,	0xc7fff00		/* GCS6:64M DRAM/SDRAM 	*/
  10              	
  11              	#BUSWIDTH; 16,32
  12              	    	.global		BUSWIDTH
  13              	.equ 	BUSWIDTH,	16
  14              	
  15              	    	.data
  16              	    	.global		BDRAMTYPE
  17 0000 53445241 	BDRAMTYPE:	.string		"SDRAM"
  17      4D00
  18              	
  19              	#This value has to be TRUE on ROM program.
  20              	#This value has to be FALSE in RAM program.
  21              	    	.global    	PLLONSTART
  22              	.equ	PLLONSTART, 	1
  23              	
  24              			.global 	PLLCLK
  25              	.equ 	PLLCLK,		64000000
  26              	
  27              			.ifeq PLLCLK-64000000	
  28              	.equ 	M_DIV,		56		/* Fin=8MHz Fout=64MHz */
  29              	.equ 	P_DIV,		2
  30              	.equ 	S_DIV,		1
  31              			.endif
  32              	
  33              	#************************************************
  34              	
  12              	    .include "memcfg.a"
   1              	/*********************************************************************************************
   2              	* File: 	memcfg.a
   3              	* Author:	embest	
   4              	* Desc: 	S3CEV40 memory bank config parameter
   5              	* History:	
   6              	*********************************************************************************************/
   7              	
   8              	#**********MEMORY CONTROL PARAMETERS*******************************
   9              	
  10              	#Bank 0 parameter
  11              	.equ 	B0_Tacs		,0x0	/* 0clk              */                     
  12              	.equ 	B0_Tcos		,0x0    /* 0clk              */                     
  13              	.equ 	B0_Tacc		,0x6    /* 10clk             */                     
  14              	.equ 	B0_Tcoh		,0x0    /* 0clk              */                     
  15              	.equ 	B0_Tah		,0x0    /* 0clk              */                     
  16              	.equ 	B0_Tacp		,0x0    /* 0clk              */                     
  17              	.equ 	B0_PMC		,0x0    /* normal(1data)     */                     
  18              	                                                                
  19              	#Bank 1 parameter                                               
  20              	.equ 	B1_Tacs		,0x3    /* 4clk              */                    
  21              	.equ 	B1_Tcos		,0x3    /* 4clk              */                    
  22              	.equ 	B1_Tacc		,0x7    /* 14clk             */                    
  23              	.equ 	B1_Tcoh		,0x3    /* 4clk              */                    
  24              	.equ 	B1_Tah		,0x3    /* 4clk              */                    
  25              	.equ 	B1_Tacp		,0x3    /* 6clk              */                    
  26              	.equ 	B1_PMC		,0x0    /* normal(1data)     */                    
  27              	                                                                
  28              	#Bank 2 parameter                                               
  29              	.equ 	B2_Tacs		,0x3    /* 4clk              */                     
  30              	.equ 	B2_Tcos		,0x3    /* 4clk              */                     
  31              	.equ 	B2_Tacc		,0x7    /* 14clk             */                     
  32              	.equ 	B2_Tcoh		,0x3    /* 4clk              */                     
  33              	.equ 	B2_Tah		,0x3    /* 4clk              */                     
  34              	.equ 	B2_Tacp		,0x3    /* 6clk              */                     
  35              	.equ 	B2_PMC		,0x0    /* normal(1data)     */                     
  36              	                                                                
  37              	#Bank 3 parameter                                               
  38              	.equ 	B3_Tacs		,0x3    /* 4clk              */                     
  39              	.equ 	B3_Tcos		,0x3    /* 4clk              */                     
  40              	.equ 	B3_Tacc		,0x7    /* 14clk             */                     
  41              	.equ 	B3_Tcoh		,0x3    /* 4clk              */                     
  42              	.equ 	B3_Tah		,0x3    /* 4clk              */                     
  43              	.equ 	B3_Tacp		,0x3    /* 6clk              */                     
  44              	.equ 	B3_PMC		,0x0    /* normal(1data)     */                     
  45              	                                                                
  46              	#Bank 4 parameter                                               
  47              	.equ 	B4_Tacs		,0x3    /* 4clk              */                     
  48              	.equ 	B4_Tcos		,0x3    /* 4clk              */                     
  49              	.equ 	B4_Tacc		,0x7    /* 14clk             */                     
  50              	.equ 	B4_Tcoh		,0x3    /* 4clk              */                     
  51              	.equ 	B4_Tah		,0x3    /* 4clk              */                     
  52              	.equ 	B4_Tacp		,0x3    /* 6clk              */                     
  53              	.equ 	B4_PMC		,0x0    /* normal(1data)     */                     
  54              	                                                                
  55              	#Bank 5 parameter                                               
  56              	.equ 	B5_Tacs		,0x3    /* 4clk              */                     
  57              	.equ 	B5_Tcos		,0x3    /* 4clk              */                     
  58              	.equ 	B5_Tacc		,0x7    /* 14clk             */                     
  59              	.equ 	B5_Tcoh		,0x3    /* 4clk              */                     
  60              	.equ 	B5_Tah		,0x3    /* 4clk              */                     
  61              	.equ 	B5_Tacp		,0x3    /* 6clk              */                     
  62              	.equ 	B5_PMC		,0x0    /* normal(1data)     */                     
  63              	                                                                
  64              	#Bank 6(if SROM) parameter
  65              	.equ 	B6_Tacs		,0x3    /* 4clk              */                     
  66              	.equ 	B6_Tcos		,0x3    /* 4clk              */                     
  67              	.equ 	B6_Tacc		,0x7    /* 14clk             */                     
  68              	.equ 	B6_Tcoh		,0x3    /* 4clk              */                     
  69              	.equ 	B6_Tah		,0x3    /* 4clk              */                     
  70              	.equ 	B6_Tacp		,0x3    /* 6clk              */                     
  71              	.equ 	B6_PMC		,0x0    /* normal(1data)     */                     
  72              	                                                                
  73              	#Bank 7(if SROM) parameter
  74              	.equ 	B7_Tacs		,0x3    /* 4clk              */                     
  75              	.equ 	B7_Tcos		,0x3    /* 4clk              */                     
  76              	.equ 	B7_Tacc		,0x7    /* 14clk             */                     
  77              	.equ 	B7_Tcoh		,0x3    /* 4clk              */                     
  78              	.equ 	B7_Tah		,0x3    /* 4clk              */                     
  79              	.equ 	B7_Tacp		,0x3    /* 6clk              */                     
  80              	.equ 	B7_PMC		,0x0    /* normal(1data)     */                     
  81              	                                                                
  82              	#;Bank 6 parameter                                              
  83              		.ifc BDRAMTYPE, "DRAM"	/* MT=01(FP DRAM) or 10(EDO DRAM)  */       
  84              	.equ 	B6_MT		,0x2    /* EDO DRAM                        */       
  85              	.equ 	B6_Trcd		,0x0    /* 1clk                            */       
  86              	.equ 	B6_Tcas		,0x0    /* 1clk                            */       
  87              	.equ 	B6_Tcp		,0x0    /* 1clk                            */       
  88              	.equ 	B6_CAN		,0x2    /* 10bit                           */       
  89              		.else	         		/* MT=11(SDRAM)                    */       
  90              	.equ 	B6_MT		,0x3    /* SDRAM                           */       
  91              	.equ 	B6_Trcd		,0x0    /* 2clk                            */       
  92              	.equ 	B6_SCAN		,0x0    /* 8bit                            */       
  93              		.endif                                                  
  94              	                                                                
  95              	#Bank 7 parameter                                               
  96              	 	.ifc BDRAMTYPE, "DRAM"	/* MT=01(FP DRAM) or 10(EDO DRAM)  */       
  97              	.equ 	B7_MT		,0x2    /* EDO DRAM                        */       
  98              	.equ 	B7_Trcd		,0x0    /* 2clk                            */       
  99              	.equ 	B7_Tcas		,0x0    /* 2clk                            */       
 100              	.equ 	B7_Tcp		,0x0    /* 2clk                            */       
 101              	.equ 	B7_CAN		,0x2    /* 10bit                           */       
 102              		.else	         		/* MT=11(SDRAM)                    */       
 103              	.equ 	B7_MT		,0x3    /* SDRAM                           */       
 104              	.equ 	B7_Trcd		,0x0    /* 2clk                            */       
 105              	.equ 	B7_SCAN		,0x0    /* 8bit                            */       
 106              		.endif                                                  
 107              	                                                                
 108              	#REFRESH parameter                                              
 109              	.equ 	REFEN		,0x1    /* Refresh enable                   */      
 110              	.equ 	TREFMD		,0x0    /* CBR(CAS before RAS)/Auto refresh */      
 111              	.equ 	Trp			,0x0    /* 2clk                           	*/
 112              	.equ 	Trc			,0x1    /* 5clk                           	*/
 113              	.equ 	Tchr		,0x2    /* 3clk                             */      
 114              	.equ 	REFCNT		,1113   /* period=15.6us, MCLK=60Mhz        */      
 115              	#************************************************
  13              	
  14              	#Memory Area
  15              	#GCS6    8M 16bit(8MB) DRAM/SDRAM(0xc000000-0xc7fffff)
  16              	#APP     RAM=0xc000000~0xc7effff 
  17              	#EV_boot RAM=0xc7f0000-0xc7ff000 // if EV_boot
  18              	#STACK	 =0xc7ffa00
  19              	
  20              	#Interrupt Control
  21              	.equ 	INTPND,		0x01e00004
  22              	.equ 	INTMOD,		0x01e00008
  23              	.equ 	INTMSK,		0x01e0000c
  24              	.equ 	I_ISPR,		0x01e00020
  25              	.equ 	I_CMST,		0x01e0001c
  26              	
  27              	#Watchdog timer
  28              	.equ 	WTCON,		0x01d30000
  29              	
  30              	#Clock Controller
  31              	.equ 	PLLCON,		0x01d80000
  32              	.equ 	CLKCON,		0x01d80004
  33              	.equ 	LOCKTIME,	0x01d8000c
  34              		
  35              	#Memory Controller
  36              	.equ 	REFRESH,	0x01c80024
  37              	
  38              	#BDMA destination register
  39              	.equ 	BDIDES0,	0x1f80008
  40              	.equ 	BDIDES1,	0x1f80028
  41              	
  42              	#Pre-defined constants
  43              	.equ 	USERMODE,	0x10
  44              	.equ 	FIQMODE,	0x11
  45              	.equ 	IRQMODE,	0x12
  46              	.equ 	SVCMODE,	0x13
  47              	.equ 	ABORTMODE,	0x17
  48              	.equ 	UNDEFMODE,	0x1b
  49              	.equ 	MODEMASK,	0x1f
  50              	.equ 	NOINT,		0xc0
  51              	.equ    IRQ_MODE,	0x40       /* disable Interrupt Mode (IRQ) */
  52              	.equ    FIQ_MODE,	0x80       /* disable Fast Interrupt Mode (FIQ) */
  53              	
  54              	.macro HANDLER HandleLabel
  55              	    sub	    sp,sp,#4	    /* decrement sp(to store jump address) */							
  56              	    stmfd   sp!,{r0}	    /* PUSH the work register to stack (lr does not push because it return to 
  57              	    ldr	    r0,=\HandleLabel/* load the address of HandleXXX to r0 */
  58              	    ldr	    r0,[r0]	    	/* load the contents(service routine start address) of HandleXXX */
  59              	    str	    r0,[sp,#4]	    /* store the contents(ISR) of HandleXXX to stack */
  60              	    ldmfd   sp!,{r0,pc}	    /* POP the work register and pc(jump to ISR) */
  61              	.endm
  62              	
  63              	    .extern       Image_RO_Limit    /* End of ROM code (=start of ROM data) */
  64              	    .extern       Image_RW_Base     /* Base of RAM to initialise */           
  65              	    .extern       Image_ZI_Base     /* Base and limit of area */              
  66              	    .extern       Image_ZI_Limit    /* to zero initialise */       
  67              	
  68              	    .extern Main			/* The main entry of mon program */
  69              	    
  70              	    .text
  71              	
  72              	    ENTRY:
  73 0000 0A0100EA 	    b ResetHandler			/* for debug            */
  74 0004 420000EA 	    b HandlerUndef      	/* handlerUndef         */
  75 0008 470000EA 	    b HandlerSWI        	/* SWI interrupt handler*/
  76 000c 520000EA 	    b HandlerPabort     	/* handlerPAbort        */
  77 0010 4B0000EA 	    b HandlerDabort     	/* handlerDAbort        */
  78 0014 FEFFFFEA 	    b .                 	/* handlerReserved      */
  79 0018 370000EA 	    b HandlerIRQ
  80 001c 300000EA 	    b HandlerFIQ
  81              		#***IMPORTANT NOTE***
  82              		#If the H/W vectored interrutp mode is enabled, The above two instructions should
  83              		#be changed like below, to work-around with H/W bug of S3C44B0X interrupt controller. 
  84              		# b HandlerIRQ  ->  subs pc,lr,#4
  85              		# b HandlerIRQ  ->  subs pc,lr,#4
  86              	
  87              	VECTOR_BRANCH:
  88 0020 6CF59FE5 	    ldr pc,=HandlerEINT0    /*mGA    H/W interrupt vector table  */
  89 0024 6CF59FE5 	    ldr pc,=HandlerEINT1    /*	                                 */	
  90 0028 6CF59FE5 	    ldr pc,=HandlerEINT2    /*                                   */  
  91 002c 6CF59FE5 	    ldr pc,=HandlerEINT3    /*                                   */  
  92 0030 6CF59FE5 	    ldr pc,=HandlerEINT4567 /*                                   */  
  93 0034 6CF59FE5 	    ldr pc,=HandlerTICK	    /*mGA                                */   
  94 0038 FEFFFFEA 	    b .                                                          
  95 003c FEFFFFEA 	    b .                                                         
  96 0040 64F59FE5 	    ldr pc,=HandlerZDMA0    /*mGB                                */  
  97 0044 64F59FE5 	    ldr pc,=HandlerZDMA1    /*                                   */  
  98 0048 64F59FE5 	    ldr pc,=HandlerBDMA0    /*                                   */  
  99 004c 64F59FE5 	    ldr pc,=HandlerBDMA1    /*                                   */  
 100 0050 64F59FE5 	    ldr pc,=HandlerWDT	    /*                                   */   
 101 0054 64F59FE5 	    ldr pc,=HandlerUERR01   /*mGB                                */  
 102 0058 FEFFFFEA 	    b .                                                          
 103 005c FEFFFFEA 	    b .                                                          
 104 0060 5CF59FE5 	    ldr pc,=HandlerTIMER0   /*mGC                                */  
 105 0064 5CF59FE5 	    ldr pc,=HandlerTIMER1   /*                                   */  
 106 0068 5CF59FE5 	    ldr pc,=HandlerTIMER2   /*                                   */  
 107 006c 5CF59FE5 	    ldr pc,=HandlerTIMER3   /*                                   */  
 108 0070 5CF59FE5 	    ldr pc,=HandlerTIMER4   /*                                   */  
 109 0074 5CF59FE5 	    ldr pc,=HandlerTIMER5   /*mGC                                */  
 110 0078 FEFFFFEA 	    b .                                                          
 111 007c FEFFFFEA 	    b .                                                          
 112 0080 54F59FE5 	    ldr pc,=HandlerURXD0    /*mGD                                */  
 113 0084 54F59FE5 	    ldr pc,=HandlerURXD1    /*                                   */  
 114 0088 54F59FE5 	    ldr pc,=HandlerIIC	    /*                                   */   
 115 008c 54F59FE5 	    ldr pc,=HandlerSIO	    /*                                   */   
 116 0090 54F59FE5 	    ldr pc,=HandlerUTXD0    /*                                   */  
 117 0094 54F59FE5 	    ldr pc,=HandlerUTXD1    /*mGD                                */  
 118 0098 FEFFFFEA 	    b .                                                          
 119 009c FEFFFFEA 	    b .                                                          
 120 00a0 4CF59FE5 	    ldr pc,=HandlerRTC	    /*mGKA                               */   
 121 00a4 FEFFFFEA 	    b .					    /*                     		         */
 122 00a8 FEFFFFEA 	    b .					    /*                     		         */
 123 00ac FEFFFFEA 	    b .					    /*                     		         */
 124 00b0 FEFFFFEA 	    b .					    /*                     		         */
 125 00b4 FEFFFFEA 	    b .					    /*mGKA                 			     */
 126 00b8 FEFFFFEA 	    b .                                                          
 127 00bc FEFFFFEA 	    b .                                                          
 128 00c0 30F59FE5 	    ldr pc,=HandlerADC	    /*mGKB                               */  
 129 00c4 FEFFFFEA 	    b .					    /*                     		         */
 130 00c8 FEFFFFEA 	    b .					    /*                     		         */
 131 00cc FEFFFFEA 	    b .					    /*                     		         */
 132 00d0 FEFFFFEA 	    b .					    /*                     		         */
 133 00d4 FEFFFFEA 	    b .					    /*mGKB                 		         */
 134 00d8 FEFFFFEA 	    b .                                                          
 135 00dc FEFFFFEA 	    b .                                                          
 136              	@0xe0=EnterPWDN                                                 
 137 00e0 14F59FE5 	    ldr pc,=EnterPWDN
 138              	
 139              	@   .ltorg
 140              	          	/* the current contents of the literal pool\
 141              	               to be dumped into the current section\ 
 142              	               (which is assumed to be the .text section)\ 
 143              	               at the current location (aligned to a word boundary).*/
 144              	   .align
 145              	
 146 00e4 04D04DE2 	HandlerFIQ:		HANDLER HandleFIQ
 146      04002DE5 
 146      0C059FE5 
 146      000090E5 
 146      04008DE5 
 147 00fc 04D04DE2 	HandlerIRQ:		HANDLER HandleIRQ
 147      04002DE5 
 147      F8049FE5 
 147      000090E5 
 147      04008DE5 
 148 0114 04D04DE2 	HandlerUndef:	HANDLER HandleUndef
 148      04002DE5 
 148      E4049FE5 
 148      000090E5 
 148      04008DE5 
 149 012c 04D04DE2 	HandlerSWI:		HANDLER HandleSWI
 149      04002DE5 
 149      D0049FE5 
 149      000090E5 
 149      04008DE5 
 150 0144 04D04DE2 	HandlerDabort:	HANDLER HandleDabort
 150      04002DE5 
 150      BC049FE5 
 150      000090E5 
 150      04008DE5 
 151 015c 04D04DE2 	HandlerPabort:	HANDLER HandlePabort
 151      04002DE5 
 151      A8049FE5 
 151      000090E5 
 151      04008DE5 
 152 0174 04D04DE2 	HandlerADC:		HANDLER HandleADC
 152      04002DE5 
 152      94049FE5 
 152      000090E5 
 152      04008DE5 
 153 018c 04D04DE2 	HandlerRTC:		HANDLER HandleRTC
 153      04002DE5 
 153      80049FE5 
 153      000090E5 
 153      04008DE5 
 154 01a4 04D04DE2 	HandlerUTXD1:	HANDLER HandleUTXD1
 154      04002DE5 
 154      6C049FE5 
 154      000090E5 
 154      04008DE5 
 155 01bc 04D04DE2 	HandlerUTXD0:	HANDLER HandleUTXD0
 155      04002DE5 
 155      58049FE5 
 155      000090E5 
 155      04008DE5 
 156 01d4 04D04DE2 	HandlerSIO:		HANDLER HandleSIO
 156      04002DE5 
 156      44049FE5 
 156      000090E5 
 156      04008DE5 
 157 01ec 04D04DE2 	HandlerIIC:		HANDLER HandleIIC
 157      04002DE5 
 157      30049FE5 
 157      000090E5 
 157      04008DE5 
 158 0204 04D04DE2 	HandlerURXD1:	HANDLER HandleURXD1
 158      04002DE5 
 158      1C049FE5 
 158      000090E5 
 158      04008DE5 
 159 021c 04D04DE2 	HandlerURXD0:	HANDLER HandleURXD0
 159      04002DE5 
 159      08049FE5 
 159      000090E5 
 159      04008DE5 
 160 0234 04D04DE2 	HandlerTIMER5:	HANDLER HandleTIMER5
 160      04002DE5 
 160      F4039FE5 
 160      000090E5 
 160      04008DE5 
 161 024c 04D04DE2 	HandlerTIMER4:	HANDLER HandleTIMER4
 161      04002DE5 
 161      E0039FE5 
 161      000090E5 
 161      04008DE5 
 162 0264 04D04DE2 	HandlerTIMER3:	HANDLER HandleTIMER3
 162      04002DE5 
 162      CC039FE5 
 162      000090E5 
 162      04008DE5 
 163 027c 04D04DE2 	HandlerTIMER2:	HANDLER HandleTIMER2
 163      04002DE5 
 163      B8039FE5 
 163      000090E5 
 163      04008DE5 
 164 0294 04D04DE2 	HandlerTIMER1:	HANDLER HandleTIMER1
 164      04002DE5 
 164      A4039FE5 
 164      000090E5 
 164      04008DE5 
 165 02ac 04D04DE2 	HandlerTIMER0:	HANDLER HandleTIMER0
 165      04002DE5 
 165      90039FE5 
 165      000090E5 
 165      04008DE5 
 166 02c4 04D04DE2 	HandlerUERR01:	HANDLER HandleUERR01
 166      04002DE5 
 166      7C039FE5 
 166      000090E5 
 166      04008DE5 
 167 02dc 04D04DE2 	HandlerWDT:		HANDLER HandleWDT
 167      04002DE5 
 167      68039FE5 
 167      000090E5 
 167      04008DE5 
 168 02f4 04D04DE2 	HandlerBDMA1:	HANDLER HandleBDMA1
 168      04002DE5 
 168      54039FE5 
 168      000090E5 
 168      04008DE5 
 169 030c 04D04DE2 	HandlerBDMA0:	HANDLER HandleBDMA0
 169      04002DE5 
 169      40039FE5 
 169      000090E5 
 169      04008DE5 
 170 0324 04D04DE2 	HandlerZDMA1:	HANDLER HandleZDMA1
 170      04002DE5 
 170      2C039FE5 
 170      000090E5 
 170      04008DE5 
 171 033c 04D04DE2 	HandlerZDMA0:	HANDLER HandleZDMA0
 171      04002DE5 
 171      18039FE5 
 171      000090E5 
 171      04008DE5 
 172 0354 04D04DE2 	HandlerTICK:	HANDLER HandleTICK
 172      04002DE5 
 172      04039FE5 
 172      000090E5 
 172      04008DE5 
 173 036c 04D04DE2 	HandlerEINT4567:HANDLER HandleEINT4567
 173      04002DE5 
 173      F0029FE5 
 173      000090E5 
 173      04008DE5 
 174 0384 04D04DE2 	HandlerEINT3:	HANDLER HandleEINT3
 174      04002DE5 
 174      DC029FE5 
 174      000090E5 
 174      04008DE5 
 175 039c 04D04DE2 	HandlerEINT2:	HANDLER HandleEINT2
 175      04002DE5 
 175      C8029FE5 
 175      000090E5 
 175      04008DE5 
 176 03b4 04D04DE2 	HandlerEINT1:	HANDLER HandleEINT1
 176      04002DE5 
 176      B4029FE5 
 176      000090E5 
 176      04008DE5 
 177 03cc 04D04DE2 	HandlerEINT0:	HANDLER HandleEINT0
 177      04002DE5 
 177      A0029FE5 
 177      000090E5 
 177      04008DE5 
 178              	
 179              	#One of the following two routines can be used for non-vectored interrupt.
 180              	
 181              	IsrIRQ:						/* using I_ISPR register. */
 182 03e4 04D04DE2 	    sub	    sp,sp,#4       	/* reserved for PC	  */
 183 03e8 00032DE9 	    stmfd   sp!,{r8-r9}   
 184              	
 185              	#IMPORTANT CAUTION
 186              	# when I_ISPC is not used properly, I_ISPR can be 0 in this routine.
 187              	
 188 03ec 8C929FE5 	    ldr	    r9,=I_ISPR
 189 03f0 009099E5 	    ldr	    r9,[r9]
 190              	
 191 03f4 000059E3 		cmp		r9, #0x0		/* If the IDLE mode work-around is used, 	*/
 192              								/* r9 may be 0 sometimes.			*/
 193 03f8 0900000A 		beq		l2
 194              	
 195 03fc 0080A0E3 	    mov	    r8,#0x0
 196              	l0:
 197 0400 A990B0E1 	    movs    r9,r9,lsr #1
 198 0404 0100002A 	    bcs	    l1
 199 0408 048088E2 	    add	    r8,r8,#4
 200 040c FBFFFFEA 	    b	    l0
 201              	
 202              	l1:
 203 0410 00929FE5 	    ldr	    r9,=HandleADC
 204 0414 089089E0 	    add	    r9,r9,r8
 205 0418 009099E5 	    ldr	    r9,[r9]
 206 041c 08908DE5 	    str	    r9,[sp,#8]
 207 0420 0083BDE8 	    ldmfd   sp!,{r8-r9,pc}
 208              	
 209              	l2:
 210 0424 0003BDE8 		ldmfd	sp!,{r8-r9}
 211 0428 04D08DE2 		add		sp,sp,#4
 212 042c 04F05EE2 		subs	pc,lr,#4
 213              	
 214              	#****************************************************
 215              	#*	START											*
 216              	#****************************************************
 217              	ResetHandler:
 218 0430 4C029FE5 	    ldr	    r0,=WTCON	    	/* watch dog disable*/
 219 0434 0010A0E3 	    ldr	    r1,=0x0 		
 220 0438 001080E5 	    str	    r1,[r0]
 221              	
 222 043c 44029FE5 	    ldr	    r0,=INTMSK
 223 0440 3E13E0E3 	    ldr	    r1,=0x07ffffff  	/* all interrupt disable */
 224 0444 001080E5 	    str	    r1,[r0]
 225              	
 226              	    #****************************************************
 227              	    #*	Set clock control registers						*
 228              	    #****************************************************
 229 0448 3C029FE5 	    ldr		r0,=LOCKTIME
 230 044c 3C129FE5 	    ldr		r1,=0xfff
 231 0450 001080E5 	    str		r1,[r0]
 232              	
 233              	.if PLLONSTART
 234 0454 7607A0E3 		ldr		r0,=PLLCON			/* temporary setting of PLL */
 235 0458 34129FE5 		ldr		r1,=((M_DIV<<12)+(P_DIV<<4)+S_DIV)	/* Fin=8MHz,Fout=64MHz     */
 236 045c 001080E5 		str		r1,[r0]
 237              	.endif
 238              	
 239 0460 30029FE5 	    ldr	    r0,=CLKCON		
 240 0464 30129FE5 	    ldr	    r1,=0x7ff8	    	/* All unit block CLK enable */
 241 0468 001080E5 	    str	    r1,[r0]
 242              	
 243              	    #****************************************
 244              	    #*  change BDMACON reset value for BDMA *   
 245              	    #****************************************
 246 046c 2C029FE5 	    ldr     r0,=BDIDES0      
 247 0470 0111A0E3 	    ldr     r1,=0x40000000   	/* BDIDESn reset value should be 0x40000000 */
 248 0474 001080E5 	    str     r1,[r0]
 249              	
 250 0478 24029FE5 	    ldr     r0,=BDIDES1      
 251 047c 0111A0E3 	    ldr     r1,=0x40000000   	/* BDIDESn reset value should be 0x40000000 */	 
 252 0480 001080E5 	    str     r1,[r0]
 253              	
 254              	    #****************************************************
 255              	    #*	Set memory control registers					* 	
 256              	    #****************************************************
 257              	    /*ldr	    r0,=SMRDATA*/
 258 0484 1C029FE5 	    ldr     r0, =(SMRDATA-0xc000000)
 259 0488 FE3F90E8 	    ldmia   r0,{r1-r13}
 260 048c 7207A0E3 	    ldr	    r0,=0x01c80000  	/* BWSCON Address */
 261 0490 FE3F80E8 	    stmia   r0,{r1-r13}
 262              	
 263              	    #;****************************************************
 264              	    #;*	Initialize stacks								* 
 265              	    #;****************************************************
 266 0494 10D29FE5 	    ldr	    sp, =SVCStack		/* Why	*/		
 267 0498 150000EB 	    bl	    InitStacks
 268              	
 269              	    #;****************************************************
 270              	    #;*	Setup IRQ handler								*
 271              	    #;****************************************************
 272 049c 60019FE5 	    ldr	    r0,=HandleIRQ		/* This routine is needed */
 273 04a0 08129FE5 	    ldr	    r1,=IsrIRQ			/* if there is not 'subs pc,lr,#4' at 0x18, 0x1c */
 274 04a4 001080E5 	    str	    r1,[r0]
 275              	
 276              	    #********************************************************
 277              	    #*	Copy and paste RW data/zero initialized data	    *
 278              	    #********************************************************
 279              	    // LDR	    r0, =Image_RO_Limit	/* Get pointer to ROM data */
 280              	    // LDR	    r1, =Image_RW_Base	/* and RAM copy	*/
 281 04a8 0000A0E3 	    LDR r0,     =0
 282 04ac 00129FE5 	    LDR r1,     =Image_ZI_Base
 283 04b0 FC319FE5 	    LDR	    r3, =Image_ZI_Base	
 284              		/* Zero init base => top of initialised data */
 285              				
 286 04b4 010050E1 	    CMP	    r0, r1	    		/* Check that they are different */
 287 04b8 0300000A 	    BEQ	    F1
 288              	F0:
 289 04bc 030051E1 	    CMP	    r1, r3				/* Copy init data                        */
 290 04c0 04209034 	    LDRCC   r2, [r0], #4        /* --> LDRCC r2, [r0] + ADD r0, r0, #4	 */
 291 04c4 04208134 	    STRCC   r2, [r1], #4        /* --> STRCC r2, [r1] + ADD r1, r1, #4   */ 
 292 04c8 FBFFFF3A 	    BCC	    F0
 293              	F1:
 294 04cc E4119FE5 	    LDR	    r1, =Image_ZI_Limit	/* Top of zero init segment */
 295 04d0 0020A0E3 	    MOV	    r2, #0
 296              	F2:
 297 04d4 010053E1 	    CMP	    r3, r1	    		/* Zero init */
 298 04d8 04208334 	    STRCC   r2, [r3], #4
 299 04dc FCFFFF3A 	    BCC	    F2
 300              	
 301 04e0 00000FE1 		MRS	r0, CPSR
 302 04e4 C000C0E3 		BIC	r0, r0, #NOINT /* enable interrupt */
 303 04e8 00F02FE1 		MSR	CPSR_cxsf, r0
 304              		/* jump to main() */
 305 04ec FEFFFFEB 	   	BL	Main
 306 04f0 FEFFFFEA 	   	B   .	    
 307              	
 308              	#;****************************************************
 309              	#;*	The function for initializing stack				*
 310              	#;****************************************************
 311              	InitStacks:
 312              		# Don't use DRAM,such as stmfd,ldmfd......
 313              		# SVCstack is initialized before
 314              		# Under toolkit ver 2.50, 'msr cpsr,r1' can be used instead of 'msr cpsr_cxsf,r1'
 315              	
 316 04f4 00000FE1 	    mrs	    r0,cpsr
 317 04f8 1F00C0E3 	    bic	    r0,r0,#MODEMASK
 318 04fc 1B1080E3 	    orr	    r1,r0,#UNDEFMODE
 319 0500 01F02FE1 	    msr	    cpsr_cxsf,r1		/* UndefMode */
 320 0504 B0D19FE5 	    ldr	    sp,=UndefStack
 321              		
 322 0508 D71080E3 	    orr	    r1,r0,#ABORTMODE|NOINT
 323 050c 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* AbortMode */	
 324 0510 A8D19FE5 	    ldr	    sp,=AbortStack
 325              	
 326 0514 921080E3 	    orr	    r1,r0,#IRQMODE|FIQ_MODE
 327 0518 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* IRQMode */
 328 051c A0D19FE5 	    ldr	    sp,=IRQStack
 329              		
 330 0520 511080E3 	    orr	    r1,r0,#FIQMODE|IRQ_MODE
 331 0524 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* FIQMode */
 332 0528 98D19FE5 	    ldr	    sp,=FIQStack
 333              	
 334 052c 1F00C0E3 	    bic	    r0,r0,#MODEMASK
 335 0530 131080E3 	    orr	    r1,r0,#SVCMODE
 336 0534 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* SVCMode */
 337 0538 6CD19FE5 	    ldr	    sp,=SVCStack
 338              	
 339              		#USER mode is not initialized.
 340 053c 0EF0A0E1 	    mov	    pc,lr 				/* The LR register may be not valid for the mode changes. */
 341              	
 342              	#****************************************************
 343              	#*	The function for entering power down mode		*
 344              	#****************************************************
 345              	#void EnterPWDN(int CLKCON);
 346              	EnterPWDN:
 347 0540 0020A0E1 	    mov	    r2,r0               /* r0=CLKCON */
 348 0544 80019FE5 	    ldr	    r0,=REFRESH		
 349 0548 003090E5 	    ldr	    r3,[r0]
 350 054c 0310A0E1 	    mov	    r1, r3
 351 0550 011581E3 	    orr	    r1, r1, #0x400000   /* self-refresh enable */
 352 0554 001080E5 	    str	    r1, [r0]
 353              	
 354 0558 0000A0E1 	    nop     /* Wait until self-refresh is issued. May not be needed. */
 355 055c 0000A0E1 	    nop     /* If the other bus master holds the bus, ... */
 356 0560 0000A0E1 	    nop	    /* mov r0, r0 */
 357 0564 0000A0E1 	    nop
 358 0568 0000A0E1 	    nop
 359 056c 0000A0E1 	    nop
 360 0570 0000A0E1 	    nop
 361              	
 362              	#enter POWERDN mode
 363 0574 1C019FE5 	    ldr	    r0,=CLKCON
 364 0578 002080E5 	    str	    r2,[r0]
 365              	
 366              	#wait until enter SL_IDLE,STOP mode and until wake-up
 367 057c 1000A0E3 	    ldr	    r0,=0x10
 368 0580 010050E2 	U0: subs    r0,r0,#1
 369 0584 FDFFFF1A 	    bne	    U0
 370              	
 371              	#exit from DRAM/SDRAM self refresh mode.
 372 0588 3C019FE5 	    ldr	    r0,=REFRESH
 373 058c 003080E5 	    str	    r3,[r0]
 374 0590 0EF0A0E1 	    mov	    pc,lr
 375              	    
 376 0594 CC030000 	    .ltorg
 376      B4030000 
 376      9C030000 
 376      84030000 
 376      6C030000 
 377              	
 378              	SMRDATA:
 379              	#*****************************************************************
 380              	#* Memory configuration has to be optimized for best performance *
 381              	#* The following parameter is not optimized.                     *
 382              	#*****************************************************************
 383              	
 384              	#*** memory access cycle parameter strategy ***
 385              	# 1) Even FP-DRAM, EDO setting has more late fetch point by half-clock
 386              	# 2) The memory settings,here, are made the safe parameters even at 66Mhz.
 387              	# 3) FP-DRAM Parameters:tRCD=3 for tRAC, tcas=2 for pad delay, tcp=2 for bus load.
 388              	# 4) DRAM refresh rate is for 40Mhz. 
 389              	
 390              	#bank0	16bit BOOT ROM
 391              	#bank1	NandFlash(8bit)/IDE/USB/rtl8019as/LCD
 392              	#bank2	No use 
 393              	#bank3	Keyboard 
 394              	#bank4	No use
 395              	#bank5	No use
 396              	#bank6	16bit SDRAM
 397              	#bank7	No use
 398              	
 399              	.ifeq BUSWIDTH-16
 400 06d0 02011111 		.long 0x11110102		/* Bank0=16bit BootRom(AT29C010A*2) :0x0 */
 401              	.else
 402              	   	.long 0x22222220		/* Bank0=OM[1:0], Bank1~Bank7=32bit 	 */
 403              	.endif
 404 06d4 00060000 		.long ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC))	/*
 405 06d8 FC7F0000 		.long ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC))	/*
 406 06dc FC7F0000 		.long ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC))	/*
 407 06e0 FC7F0000 		.long ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC))	/*
 408 06e4 FC7F0000 		.long ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC))	/*
 409 06e8 FC7F0000 		.long ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC))	/*
 410              		.ifc "DRAM",BDRAMTYPE
 411              		    .long ((B6_MT<<15)+(B6_Trcd<<4)+(B6_Tcas<<3)+(B6_Tcp<<2)+(B6_CAN))	/* GCS6 check the MT value 
 412              		    .long ((B7_MT<<15)+(B7_Trcd<<4)+(B7_Tcas<<3)+(B7_Tcp<<2)+(B7_CAN))	/* GCS7                    
 413              		.else
 414 06ec 00800100 			.long ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))	/* GCS6 */
 415 06f0 00800100 			.long ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN))	/* GCS7 */
 416              		.endif
 417 06f4 59048600 		.long ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT)	/* REFRESH RFEN=1, TREFMD=0
 418 06f8 10000000 		.long 0x10				/* SCLK power down mode, BANKSIZE 32M/32M */
 419 06fc 20000000 		.long 0x20				/* MRSR6 CL=2clk                          */
 420 0700 20000000 		.long 0x20				/* MRSR7                                  */
 421              	
 422              	
 423              	.equ 	UserStack,	_ISR_STARTADDRESS-0xf00    		/* c7ff000 */   	
 424              	.equ	SVCStack,	_ISR_STARTADDRESS-0xf00+256    	/* c7ff100 */
 425              	.equ	UndefStack,	_ISR_STARTADDRESS-0xf00+256*2   /* c7ff200 */
 426              	.equ	AbortStack,	_ISR_STARTADDRESS-0xf00+256*3   /* c7ff300 */
 427              	.equ	IRQStack,	_ISR_STARTADDRESS-0xf00+256*4   /* c7ff400 */
 428              	.equ	FIQStack,	_ISR_STARTADDRESS-0xf00+256*5   /* c7ff500 */
 429              	
 430              	.equ	HandleReset,	_ISR_STARTADDRESS
 431              	.equ	HandleUndef,	_ISR_STARTADDRESS+4
 432              	.equ	HandleSWI,		_ISR_STARTADDRESS+4*2
 433              	.equ	HandlePabort,	_ISR_STARTADDRESS+4*3
 434              	.equ	HandleDabort,	_ISR_STARTADDRESS+4*4
 435              	.equ	HandleReserved,	_ISR_STARTADDRESS+4*5
 436              	.equ	HandleIRQ,		_ISR_STARTADDRESS+4*6
 437              	.equ	HandleFIQ,		_ISR_STARTADDRESS+4*7
 438              	
 439              	# Don't use the label 'IntVectorTable',
 440              	# because armasm.exe can not recognize this label correctly.
 441              	# the value is different with an address you think it may be.
 442              	# IntVectorTable
 443              	.equ	HandleADC,    	_ISR_STARTADDRESS+4*8
 444              	.equ	HandleRTC,		_ISR_STARTADDRESS+4*9
 445              	.equ	HandleUTXD1, 	_ISR_STARTADDRESS+4*10
 446              	.equ	HandleUTXD0,	_ISR_STARTADDRESS+4*11
 447              	.equ	HandleSIO,		_ISR_STARTADDRESS+4*12
 448              	.equ	HandleIIC,		_ISR_STARTADDRESS+4*13
 449              	.equ	HandleURXD1,	_ISR_STARTADDRESS+4*14
 450              	.equ	HandleURXD0,	_ISR_STARTADDRESS+4*15
 451              	.equ	HandleTIMER5,	_ISR_STARTADDRESS+4*16
 452              	.equ	HandleTIMER4,	_ISR_STARTADDRESS+4*17
 453              	.equ	HandleTIMER3,	_ISR_STARTADDRESS+4*18
 454              	.equ	HandleTIMER2,	_ISR_STARTADDRESS+4*19
 455              	.equ	HandleTIMER1,	_ISR_STARTADDRESS+4*20
 456              	.equ	HandleTIMER0,	_ISR_STARTADDRESS+4*21
 457              	.equ	HandleUERR01,	_ISR_STARTADDRESS+4*22
 458              	.equ	HandleWDT,		_ISR_STARTADDRESS+4*23
 459              	.equ	HandleBDMA1, 	_ISR_STARTADDRESS+4*24
 460              	.equ	HandleBDMA0,	_ISR_STARTADDRESS+4*25
 461              	.equ	HandleZDMA1, 	_ISR_STARTADDRESS+4*26
 462              	.equ	HandleZDMA0,	_ISR_STARTADDRESS+4*27
 463              	.equ	HandleTICK,		_ISR_STARTADDRESS+4*28
 464              	.equ	HandleEINT4567,	_ISR_STARTADDRESS+4*29
 465              	.equ	HandleEINT3,	_ISR_STARTADDRESS+4*30
 466              	.equ	HandleEINT2,	_ISR_STARTADDRESS+4*31
 467              	.equ	HandleEINT1,	_ISR_STARTADDRESS+4*32
 468              	.equ	HandleEINT0,	_ISR_STARTADDRESS+4*33		/* 0xc1(c7)fff84 */
 469              	
 470              	.global sudoku_candidatos_propagar_arm
 471              	.global sudoku_candidatos_init_arm
 472              	
 473              	################################################################################
 474              	.arm
 475              	sudoku_candidatos_init_arm:
 476              	    @ r0 = cuadricula
 477              	    @ r1 = fila
 478              	    @ r2 = columna
 479              	    @ r3 = valor actual
 480              	    @ r4 = desplazamiento fila
 481              	    @ r5 = desplazamiento columna
 482              	    @ r6 = 0x1FF0 lista de candidatos
 483              	    @ r7 = desplazamiento total
 484              	
 485 0704 0190A0E1 		MOV r9, r1						@ r9 = version propagar (C=0, ARM=1, THUMB=2)
 486              	
 487 0708 0010A0E3 	    MOV r1, #0
 488 070c 1F6CA0E3 	    MOV r6, #0x1F00               	@ Cargar parte alta de (0x1F00)
 489 0710 F06086E3 	    ORR r6, r6, #0x00F0           	@ Combinar parte baja (0x00F0) para obtener 0x1FF0
 490              	
 491              	init_fila:
 492 0714 090051E3 	    CMP r1, #9
 493 0718 0F0000AA 	    BGE fin_init
 494              	
 495 071c 8142A0E1 	    LSL r4, r1, #5					@ Desplazamiento a siguiente fila (r1 * 32 bytes)
 496              	
 497 0720 0020A0E3 	    MOV r2, #0
 498              	init_columna:
 499 0724 090052E3 	    CMP r2, #9
 500 0728 090000AA 	    BGE fin_init_columna
 501              	
 502 072c 8250A0E1 	    LSL r5, r2, #1					@ Desplazamiento a siguiente columna (r2 * 2 bytes)
 503              	
 504 0730 057084E0 	    ADD r7, r4, r5        			@ Desplazamiento total (fila + columna)
 505              	
 506 0734 B73090E1 	    LDRH r3, [r0, r7]
 507              	
 508 0738 028903E2 	   	AND r8, r3, #0x8000				@ Objeter valor de la pista
 509 073c 020958E3 		CMP r8, #0x8000					@ Si pista == 1 se omite la inicializacion de candidatos
 510 0740 010000AA 	    BGE skip_init
 511              	
 512 0744 063083E1 	    ORR r3, r3, r6        			@ celda |= 0x1FF0 - Activar todos los candidatos
 513 0748 B73080E1 	    STRH r3, [r0, r7]
 514              	
 515              	skip_init:
 516 074c 012082E2 	    ADD r2, r2, #1
 517 0750 F3FFFFEA 	    B init_columna
 518              	
 519              	fin_init_columna:
 520 0754 011081E2 	    ADD r1, r1, #1
 521 0758 EDFFFFEA 	    B init_fila
 522              	
 523              	fin_init:
 524              	
 525              	@ Recorrer la cuadricula para llamar a las versiones de propagar
 526              	
 527 075c 00A0A0E3 		MOV r10, #0							@ Contador de celdas vacias
 528 0760 0010A0E3 		MOV r1, #0
 529              	fila_cuadricula:
 530 0764 090051E3 		CMP r1, #9
 531 0768 1B0000AA 		BGE fin_cuadricula
 532              	
 533 076c 8142A0E1 		LSL r4, r1, #5
 534              	
 535 0770 0020A0E3 		MOV r2, #0
 536              	recorrer_columna:
 537 0774 090052E3 		CMP r2, #9
 538 0778 150000AA 		BGE siguiente_fila
 539              	
 540 077c 8260A0E1 		LSL r6, r2, #1
 541              	
 542 0780 067084E0 		ADD r7, r4, r6
 543              	
 544 0784 B73090E1 		LDRH r3, [r0, r7]
 545              	
 546 0788 0F3003E2 		AND r3, r3, #0xF				@celda_leer_valor()
 547 078c 000053E3 		CMP r3, #0
 548 0790 0300000A 		BEQ skip_propagation
 549              	
 550 0794 000059E3 		CMP r9, #0
 551 0798 0300000A 		BEQ propagar_C
 552              	
 553 079c 010059E3 		CMP r9, #1
 554 07a0 0500000A 		BEQ propagar_ARM
 555              	skip_propagation:
 556 07a4 01A08AE2 		ADD r10, r10, #1
 557 07a8 070000EA 		B final_columna
 558              	propagar_C:
 559 07ac FF5F2DE8 		STMED SP!, {r0-r12, r14}
 560 07b0 FEFFFFEB 		BL sudoku_candidatos_propagar_c
 561 07b4 FF5FBDE9 		LDMED SP!, {r0-r12, r14}
 562 07b8 030000EA 		B final_columna
 563              	propagar_ARM:
 564 07bc FF5F2DE8 		STMED SP!, {r0-r12, r14}
 565 07c0 FEFFFFEB 		BL sudoku_candidatos_propagar_arm
 566 07c4 FF5FBDE9 		LDMED SP!, {r0-r12, r14}
 567 07c8 FFFFFFEA 		B final_columna
 568              	#propagar_THUMB:
 569              	#	BL sudoku_candidatos_propagar_arm
 570              	#	B final_columna
 571              	final_columna:
 572 07cc 012082E2 		ADD r2, r2, #1
 573 07d0 E7FFFFEA 		B recorrer_columna
 574              	siguiente_fila:
 575 07d4 011081E2 		ADD r1, r1, #1
 576 07d8 E1FFFFEA 		B fila_cuadricula
 577              	fin_cuadricula:
 578 07dc 0A00A0E1 		MOV r0, r10
 579 07e0 1EFF2FE1 	  	BX lr
 580              	
 581              	
 582              	@ Calcula el desplazamiento necesario para llegar a la celda, y llama a las funciones de propagacio
 583              	sudoku_candidatos_propagar_arm:
 584 07e4 00582DE9 		STMFD sp!, {r11, r12, lr}
 585              		@ r0 = cuadricula
 586              		@ r1 = indice fila
 587              		@ r2 = indice columna
 588              		@ r3 = valor actual celda
 589              		@ r4 = desplazamiento de la fila
 590              		@ r5 = desplazamiento de la columna
 591              		@ r6 = bit desplazado (se usara para desactivar los candidatos)
 592              		@ r7 = desplazamiento total (r4 + r5)
 593              	
 594 07e8 8142A0E1 		LSL r4, r1, #5							@ Desplazamiento fila (r1 * 32 bytes)
 595              	
 596 07ec 8250A0E1 		LSL r5, r2, #1							@ Desplazamiento columna (r2 * 2 bytes)
 597              	
 598 07f0 057084E0 		ADD r7, r4, r5							@ Desplazamiento total (fila + columna)
 599              	
 600 07f4 038083E2 		ADD r8, r3, #3							@ r8 = displace = (3 + r3)
 601              	
 602 07f8 0160A0E3 		MOV r6, #1
 603 07fc 1668A0E1 		LSL r6, r6, r8							@ desplazar bit a la izquierda r8 posiciones
 604              	
 605 0800 B78090E1 		LDRH r8, [r0, r7]
 606              	
 607              	@ Actualiza los candidatos de la fila (verticalmente)
 608 0804 0090A0E3 		MOV r9, #0
 609              	fila_loop:
 610 0808 090059E3 	    CMP r9, #9
 611 080c 0B0000AA 	    BGE fin_fila
 612              	
 613 0810 89A2A0E1 	    LSL r10, r9, #5               			@ Desplazar la fila (r9 * 32)
 614 0814 05B08AE0 	    ADD r11, r10, r5               			@ r11 = desplazamiento total = fila + columna (columna fija p
 615              	
 616 0818 BB8090E1 	    LDRH r8, [r0, r11]
 617              	
 618 081c 02C908E2 	    AND r12, r8, #0x8000
 619 0820 02095CE3 	    CMP r12, #0x8000
 620 0824 0300000A 	    BEQ skip_row
 621              	
 622 0828 010059E1 	    CMP r9, r1
 623 082c 0100000A 	    BEQ skip_row
 624              	
 625 0830 0680C8E1 	    BIC r8, r8, r6               			@ celda &= ~(1 << displace) - Actualizar el bit candidato
 626 0834 BB8080E1 	    STRH r8, [r0, r11]
 627              	skip_row:
 628 0838 019089E2 	    ADD r9, r9, #1
 629 083c F1FFFFEA 	    B fila_loop
 630              	fin_fila:
 631              	@ Actualiza los candidatos de la columna (Horizontalmente)
 632 0840 0090A0E3 		MOV r9, #0
 633              	col_loop:
 634 0844 090059E3 	    CMP r9, #9
 635 0848 0B0000AA 	    BGE fin_col
 636              	
 637 084c 89A0A0E1 	    LSL r10, r9, #1               			@ Desplazar la columna (r9 * 2)
 638 0850 0AB084E0 	    ADD r11, r4, r10               			@ r11 = desplazamiento total = fila + columna (fila fija para
 639              	
 640 0854 BB8090E1 	    LDRH r8, [r0, r11]
 641              	
 642 0858 02C908E2 	    AND r12, r8, #0x8000
 643 085c 02095CE3 	    CMP r12, #0x8000
 644 0860 0300000A 	    BEQ skip_column
 645              	
 646 0864 020059E1 	    CMP r9, r2
 647 0868 0100000A 	    BEQ skip_column
 648              	
 649 086c 0680C8E1 	    BIC r8, r8, r6               			@ celda &= ~(1 << displace) - Actualizar bit candidato
 650 0870 BB8080E1 	    STRH r8, [r0, r11]
 651              	skip_column:
 652 0874 019089E2 	    ADD r9, r9, #1
 653 0878 F1FFFFEA 	    B col_loop
 654              	fin_col:
 655              	@ Calcula el limite inferior (esquina superior izquierda) y limite superior de la region 3x3 corres
 656 087c 0180A0E1 		MOV r8, r1
 657 0880 0090A0E3 		MOV r9, #0
 658              	row_index:
 659 0884 030058E3 		CMP r8, #3
 660 0888 020000BA 		BLT row_index_end						@ Si es menor a 3, termina el calculo de fila
 661              	
 662 088c 038048E2 		SUB r8, r8, #3							@ Restas sucesivas para determinar la region de la celda (1�,2� o 3� re
 663 0890 039089E2 		ADD r9, r9, #3							@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 664 0894 FAFFFFEA 		B row_index
 665              	row_index_end:
 666 0898 0970A0E1 		MOV r7, r9								@ Guardar el indice calculado en r8 (fila)
 667              	
 668 089c 0280A0E1 		MOV r8, r2
 669 08a0 0090A0E3 		MOV r9, #0
 670              	col_index:
 671 08a4 030058E3 		CMP r8, #3
 672 08a8 020000BA 		BLT col_index_end						@ Si es menor a 3, termina el calculo de columna
 673              	
 674 08ac 038048E2 		SUB r8, r8, #3							@ Restas sucesivas para determinar la region de la celda (1�,2� o 3� re
 675 08b0 039089E2 		ADD r9, r9, #3							@ Aumentar #3 para ubicarse al inicio de la region correspondiente
 676 08b4 FAFFFFEA 		B col_index
 677              	col_index_end:
 678 08b8 0980A0E1 		MOV r8, r9								@ Guardar el indice calculado en r7 (columna)
 679              	
 680 08bc 039087E2 		ADD r9, r7, #3							@ r9 = Limite superior de la fila
 681 08c0 03A088E2 		ADD r10, r8, #3							@ r10 = Limite superior de la columna
 682              	@ Actualiza los candidatos de la region 3x3
 683              	region_row_loop:
 684 08c4 090057E1 		CMP r7, r9
 685 08c8 130000AA 		BGE end_of_region
 686              	region_col_loop:
 687 08cc 0A0058E1 		CMP r8, r10
 688 08d0 0E0000AA 		BGE end_of_column
 689              	
 690 08d4 8742A0E1 		LSL r4, r7, #5							@ Desplazamiento fila (r7 * 32)
 691 08d8 8850A0E1 		LSL r5, r8, #1							@ Desplazamiento columna (r10 * 2)
 692 08dc 05B084E0 		ADD r11, r4, r5							@ Desplazamiento total de la celda (fila + columna)
 693              	
 694 08e0 BBC090E1 		LDRH r12, [r0, r11]
 695              	
 696 08e4 02490CE2 		AND r4, r12, #0x8000
 697 08e8 020954E3 		CMP r4, #0x8000
 698 08ec 0500000A 		BEQ skip_cell
 699              	
 700 08f0 010057E1 		CMP r7, r1
 701 08f4 0300000A 		BEQ skip_cell
 702              	
 703 08f8 020058E1 		CMP r8, r2
 704 08fc 0100000A 		BEQ skip_cell
 705              	
 706 0900 06C0CCE1 		BIC r12, r12, r6						@ celda &= ~(1 << displace) - Actualizar bit candidato
 707 0904 BBC080E1 		STRH r12, [r0, r11]
 708              	skip_cell:
 709 0908 018088E2 		ADD r8, r8, #1
 710 090c EEFFFFEA 		B region_col_loop
 711              	end_of_column:
 712 0910 017087E2 		ADD r7, r7, #1
 713 0914 038048E2 		SUB r8, r8, #3						@ Regresar a la primera columa de la regi�n
 714 0918 E9FFFFEA 		B region_row_loop
 715              	end_of_region:
 716 091c 0058BDE8 		LDMFD sp!, {r11, r12, lr}
 717 0920 1EFF2FE1 		BX lr
 718              	
 719              	################################################################################
 720              	.data
 721              	.ltorg
 722 0006 00000000 	.align 5    /* guarantees 32-byte alignment (2^5) */
 722      00000000 
 722      00000000 
 722      00000000 
 722      00000000 
 723              	
 724              	# huecos para cuadrar
 725              	.global cuadricula
 726              	
 727              	cuadricula:
 728              	     /* 9 filas de 16 entradas para facilitar la visualizacion, 16 bits por celda */
 729 0020 05800000 	    .hword   0x8005,0x0000,0x0000,0x8003,0x0000,0x0000,0x0000,0x0000,0x0000,0,0,0,0,0,0,0
 729      00000380 
 729      00000000 
 729      00000000 
 729      00000000 
 730 0040 00000000 	    .hword   0x0000,0x0000,0x0000,0x0000,0x8009,0x0000,0x0000,0x0000,0x8005,0,0,0,0,0,0,0
 730      00000000 
 730      09800000 
 730      00000000 
 730      05800000 
 731 0060 00000980 	    .hword   0x0000,0x8009,0x8006,0x8007,0x0000,0x8005,0x0000,0x8003,0x0000,0,0,0,0,0,0,0
 731      06800780 
 731      00000580 
 731      00000380 
 731      00000000 
 732 0080 00000880 	    .hword   0x0000,0x8008,0x0000,0x8009,0x0000,0x0000,0x8006,0x0000,0x0000,0,0,0,0,0,0,0
 732      00000980 
 732      00000000 
 732      06800000 
 732      00000000 
 733 00a0 00000000 	    .hword   0x0000,0x0000,0x8005,0x8008,0x8006,0x8001,0x8004,0x0000,0x0000,0,0,0,0,0,0,0
 733      05800880 
 733      06800180 
 733      04800000 
 733      00000000 
 734 00c0 00000000 	    .hword   0x0000,0x0000,0x8004,0x8002,0x0000,0x8003,0x0000,0x8007,0x0000,0,0,0,0,0,0,0
 734      04800280 
 734      00000380 
 734      00000780 
 734      00000000 
 735 00e0 00000780 	    .hword   0x0000,0x8007,0x0000,0x8005,0x0000,0x8009,0x8002,0x8006,0x0000,0,0,0,0,0,0,0
 735      00000580 
 735      00000980 
 735      02800680 
 735      00000000 
 736 0100 06800000 	    .hword   0x8006,0x0000,0x0000,0x0000,0x8008,0x0000,0x0000,0x0000,0x0000,0,0,0,0,0,0,0
 736      00000000 
 736      08800000 
 736      00000000 
 736      00000000 
 737 0120 00000000 	    .hword   0x0000,0x0000,0x0000,0x0000,0x0000,0x8002,0x0000,0x0000,0x8001,0,0,0,0,0,0,0
 737      00000000 
 737      00000280 
 737      00000000 
 737      01800000 
 738              	.end
DEFINED SYMBOLS
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/option.a:9      *ABS*:0c7fff00 _ISR_STARTADDRESS
                            *ABS*:00000010 BUSWIDTH
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/option.a:17     .data:00000000 BDRAMTYPE
                            *ABS*:00000001 PLLONSTART
                            *ABS*:03d09000 PLLCLK
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/option.a:28     *ABS*:00000038 M_DIV
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/option.a:29     *ABS*:00000002 P_DIV
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/option.a:30     *ABS*:00000001 S_DIV
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:11     *ABS*:00000000 B0_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:12     *ABS*:00000000 B0_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:13     *ABS*:00000006 B0_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:14     *ABS*:00000000 B0_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:15     *ABS*:00000000 B0_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:16     *ABS*:00000000 B0_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:17     *ABS*:00000000 B0_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:20     *ABS*:00000003 B1_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:21     *ABS*:00000003 B1_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:22     *ABS*:00000007 B1_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:23     *ABS*:00000003 B1_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:24     *ABS*:00000003 B1_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:25     *ABS*:00000003 B1_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:26     *ABS*:00000000 B1_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:29     *ABS*:00000003 B2_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:30     *ABS*:00000003 B2_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:31     *ABS*:00000007 B2_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:32     *ABS*:00000003 B2_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:33     *ABS*:00000003 B2_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:34     *ABS*:00000003 B2_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:35     *ABS*:00000000 B2_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:38     *ABS*:00000003 B3_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:39     *ABS*:00000003 B3_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:40     *ABS*:00000007 B3_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:41     *ABS*:00000003 B3_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:42     *ABS*:00000003 B3_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:43     *ABS*:00000003 B3_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:44     *ABS*:00000000 B3_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:47     *ABS*:00000003 B4_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:48     *ABS*:00000003 B4_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:49     *ABS*:00000007 B4_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:50     *ABS*:00000003 B4_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:51     *ABS*:00000003 B4_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:52     *ABS*:00000003 B4_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:53     *ABS*:00000000 B4_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:56     *ABS*:00000003 B5_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:57     *ABS*:00000003 B5_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:58     *ABS*:00000007 B5_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:59     *ABS*:00000003 B5_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:60     *ABS*:00000003 B5_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:61     *ABS*:00000003 B5_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:62     *ABS*:00000000 B5_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:65     *ABS*:00000003 B6_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:66     *ABS*:00000003 B6_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:67     *ABS*:00000007 B6_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:68     *ABS*:00000003 B6_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:69     *ABS*:00000003 B6_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:70     *ABS*:00000003 B6_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:71     *ABS*:00000000 B6_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:74     *ABS*:00000003 B7_Tacs
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:75     *ABS*:00000003 B7_Tcos
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:76     *ABS*:00000007 B7_Tacc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:77     *ABS*:00000003 B7_Tcoh
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:78     *ABS*:00000003 B7_Tah
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:79     *ABS*:00000003 B7_Tacp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:80     *ABS*:00000000 B7_PMC
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:90     *ABS*:00000003 B6_MT
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:91     *ABS*:00000000 B6_Trcd
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:92     *ABS*:00000000 B6_SCAN
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:103    *ABS*:00000003 B7_MT
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:104    *ABS*:00000000 B7_Trcd
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:105    *ABS*:00000000 B7_SCAN
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:109    *ABS*:00000001 REFEN
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:110    *ABS*:00000000 TREFMD
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:111    *ABS*:00000000 Trp
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:112    *ABS*:00000001 Trc
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:113    *ABS*:00000002 Tchr
C:\Users\Jorge\Eclipse-Juno\Practica_2_PH\common/memcfg.a:114    *ABS*:00000459 REFCNT
../common/44binit.asm:21     *ABS*:01e00004 INTPND
../common/44binit.asm:22     *ABS*:01e00008 INTMOD
../common/44binit.asm:23     *ABS*:01e0000c INTMSK
../common/44binit.asm:24     *ABS*:01e00020 I_ISPR
../common/44binit.asm:25     *ABS*:01e0001c I_CMST
../common/44binit.asm:28     *ABS*:01d30000 WTCON
../common/44binit.asm:31     *ABS*:01d80000 PLLCON
../common/44binit.asm:32     *ABS*:01d80004 CLKCON
../common/44binit.asm:33     *ABS*:01d8000c LOCKTIME
../common/44binit.asm:36     *ABS*:01c80024 REFRESH
../common/44binit.asm:39     *ABS*:01f80008 BDIDES0
../common/44binit.asm:40     *ABS*:01f80028 BDIDES1
../common/44binit.asm:43     *ABS*:00000010 USERMODE
../common/44binit.asm:44     *ABS*:00000011 FIQMODE
../common/44binit.asm:45     *ABS*:00000012 IRQMODE
../common/44binit.asm:46     *ABS*:00000013 SVCMODE
../common/44binit.asm:47     *ABS*:00000017 ABORTMODE
../common/44binit.asm:48     *ABS*:0000001b UNDEFMODE
../common/44binit.asm:49     *ABS*:0000001f MODEMASK
../common/44binit.asm:50     *ABS*:000000c0 NOINT
../common/44binit.asm:51     *ABS*:00000040 IRQ_MODE
../common/44binit.asm:52     *ABS*:00000080 FIQ_MODE
../common/44binit.asm:72     .text:00000000 ENTRY
../common/44binit.asm:217    .text:00000430 ResetHandler
../common/44binit.asm:73     .text:00000000 $a
../common/44binit.asm:148    .text:00000114 HandlerUndef
../common/44binit.asm:149    .text:0000012c HandlerSWI
../common/44binit.asm:151    .text:0000015c HandlerPabort
../common/44binit.asm:150    .text:00000144 HandlerDabort
../common/44binit.asm:147    .text:000000fc HandlerIRQ
../common/44binit.asm:146    .text:000000e4 HandlerFIQ
../common/44binit.asm:87     .text:00000020 VECTOR_BRANCH
../common/44binit.asm:177    .text:000003cc HandlerEINT0
../common/44binit.asm:176    .text:000003b4 HandlerEINT1
../common/44binit.asm:175    .text:0000039c HandlerEINT2
../common/44binit.asm:174    .text:00000384 HandlerEINT3
../common/44binit.asm:173    .text:0000036c HandlerEINT4567
../common/44binit.asm:172    .text:00000354 HandlerTICK
../common/44binit.asm:171    .text:0000033c HandlerZDMA0
../common/44binit.asm:170    .text:00000324 HandlerZDMA1
../common/44binit.asm:169    .text:0000030c HandlerBDMA0
../common/44binit.asm:168    .text:000002f4 HandlerBDMA1
../common/44binit.asm:167    .text:000002dc HandlerWDT
../common/44binit.asm:166    .text:000002c4 HandlerUERR01
../common/44binit.asm:165    .text:000002ac HandlerTIMER0
../common/44binit.asm:164    .text:00000294 HandlerTIMER1
../common/44binit.asm:163    .text:0000027c HandlerTIMER2
../common/44binit.asm:162    .text:00000264 HandlerTIMER3
../common/44binit.asm:161    .text:0000024c HandlerTIMER4
../common/44binit.asm:160    .text:00000234 HandlerTIMER5
../common/44binit.asm:159    .text:0000021c HandlerURXD0
../common/44binit.asm:158    .text:00000204 HandlerURXD1
../common/44binit.asm:157    .text:000001ec HandlerIIC
../common/44binit.asm:156    .text:000001d4 HandlerSIO
../common/44binit.asm:155    .text:000001bc HandlerUTXD0
../common/44binit.asm:154    .text:000001a4 HandlerUTXD1
../common/44binit.asm:153    .text:0000018c HandlerRTC
../common/44binit.asm:152    .text:00000174 HandlerADC
../common/44binit.asm:346    .text:00000540 EnterPWDN
                            *ABS*:0c7fff1c HandleFIQ
                            *ABS*:0c7fff18 HandleIRQ
                            *ABS*:0c7fff04 HandleUndef
                            *ABS*:0c7fff08 HandleSWI
                            *ABS*:0c7fff10 HandleDabort
                            *ABS*:0c7fff0c HandlePabort
                            *ABS*:0c7fff20 HandleADC
                            *ABS*:0c7fff24 HandleRTC
                            *ABS*:0c7fff28 HandleUTXD1
                            *ABS*:0c7fff2c HandleUTXD0
                            *ABS*:0c7fff30 HandleSIO
                            *ABS*:0c7fff34 HandleIIC
                            *ABS*:0c7fff38 HandleURXD1
                            *ABS*:0c7fff3c HandleURXD0
                            *ABS*:0c7fff40 HandleTIMER5
                            *ABS*:0c7fff44 HandleTIMER4
                            *ABS*:0c7fff48 HandleTIMER3
                            *ABS*:0c7fff4c HandleTIMER2
                            *ABS*:0c7fff50 HandleTIMER1
                            *ABS*:0c7fff54 HandleTIMER0
                            *ABS*:0c7fff58 HandleUERR01
                            *ABS*:0c7fff5c HandleWDT
                            *ABS*:0c7fff60 HandleBDMA1
                            *ABS*:0c7fff64 HandleBDMA0
                            *ABS*:0c7fff68 HandleZDMA1
                            *ABS*:0c7fff6c HandleZDMA0
                            *ABS*:0c7fff70 HandleTICK
                            *ABS*:0c7fff74 HandleEINT4567
                            *ABS*:0c7fff78 HandleEINT3
                            *ABS*:0c7fff7c HandleEINT2
                            *ABS*:0c7fff80 HandleEINT1
                            *ABS*:0c7fff84 HandleEINT0
../common/44binit.asm:181    .text:000003e4 IsrIRQ
../common/44binit.asm:209    .text:00000424 l2
../common/44binit.asm:196    .text:00000400 l0
../common/44binit.asm:202    .text:00000410 l1
../common/44binit.asm:378    .text:000006d0 SMRDATA
                            *ABS*:0c7ff100 SVCStack
../common/44binit.asm:311    .text:000004f4 InitStacks
../common/44binit.asm:293    .text:000004cc F1
../common/44binit.asm:288    .text:000004bc F0
../common/44binit.asm:296    .text:000004d4 F2
                            *ABS*:0c7ff200 UndefStack
                            *ABS*:0c7ff300 AbortStack
                            *ABS*:0c7ff400 IRQStack
                            *ABS*:0c7ff500 FIQStack
../common/44binit.asm:368    .text:00000580 U0
../common/44binit.asm:376    .text:00000594 $d
../common/44binit.asm:423    *ABS*:0c7ff000 UserStack
../common/44binit.asm:430    *ABS*:0c7fff00 HandleReset
../common/44binit.asm:435    *ABS*:0c7fff14 HandleReserved
../common/44binit.asm:583    .text:000007e4 sudoku_candidatos_propagar_arm
../common/44binit.asm:475    .text:00000704 sudoku_candidatos_init_arm
../common/44binit.asm:485    .text:00000704 $a
../common/44binit.asm:491    .text:00000714 init_fila
../common/44binit.asm:523    .text:0000075c fin_init
../common/44binit.asm:498    .text:00000724 init_columna
../common/44binit.asm:519    .text:00000754 fin_init_columna
../common/44binit.asm:515    .text:0000074c skip_init
../common/44binit.asm:529    .text:00000764 fila_cuadricula
../common/44binit.asm:577    .text:000007dc fin_cuadricula
../common/44binit.asm:536    .text:00000774 recorrer_columna
../common/44binit.asm:574    .text:000007d4 siguiente_fila
../common/44binit.asm:555    .text:000007a4 skip_propagation
../common/44binit.asm:558    .text:000007ac propagar_C
../common/44binit.asm:563    .text:000007bc propagar_ARM
../common/44binit.asm:571    .text:000007cc final_columna
../common/44binit.asm:609    .text:00000808 fila_loop
../common/44binit.asm:630    .text:00000840 fin_fila
../common/44binit.asm:627    .text:00000838 skip_row
../common/44binit.asm:633    .text:00000844 col_loop
../common/44binit.asm:654    .text:0000087c fin_col
../common/44binit.asm:651    .text:00000874 skip_column
../common/44binit.asm:658    .text:00000884 row_index
../common/44binit.asm:665    .text:00000898 row_index_end
../common/44binit.asm:670    .text:000008a4 col_index
../common/44binit.asm:677    .text:000008b8 col_index_end
../common/44binit.asm:683    .text:000008c4 region_row_loop
../common/44binit.asm:715    .text:0000091c end_of_region
../common/44binit.asm:686    .text:000008cc region_col_loop
../common/44binit.asm:711    .text:00000910 end_of_column
../common/44binit.asm:708    .text:00000908 skip_cell
../common/44binit.asm:722    .data:00000006 $d
../common/44binit.asm:727    .data:00000020 cuadricula
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
Image_ZI_Base
Image_ZI_Limit
Main
sudoku_candidatos_propagar_c
